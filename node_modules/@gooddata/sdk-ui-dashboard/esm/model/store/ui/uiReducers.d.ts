import { AnyAction, CaseReducer } from "@reduxjs/toolkit";
import { ObjRef } from "@gooddata/sdk-model";
import { UiState } from "./uiState";
import { ILayoutCoordinates, IMenuButtonItemsVisibility } from "../../../types";
export declare const uiReducers: {
    openScheduleEmailDialog: CaseReducer<UiState, AnyAction>;
    closeScheduleEmailDialog: CaseReducer<UiState, AnyAction>;
    setScheduleEmailDialogDefaultAttachment: CaseReducer<UiState, {
        payload: ObjRef;
        type: string;
    }>;
    resetScheduleEmailDialogDefaultAttachment: CaseReducer<UiState, AnyAction>;
    openScheduleEmailManagementDialog: CaseReducer<UiState, AnyAction>;
    closeScheduleEmailManagementDialog: CaseReducer<UiState, AnyAction>;
    openSaveAsDialog: CaseReducer<UiState, AnyAction>;
    closeSaveAsDialog: CaseReducer<UiState, AnyAction>;
    setFilterBarExpanded: CaseReducer<UiState, {
        payload: boolean;
        type: string;
    }>;
    closeKpiAlertDialog: CaseReducer<UiState, AnyAction>;
    openKpiAlertDialog: CaseReducer<UiState, {
        payload: ObjRef;
        type: string;
    }>;
    highlightKpiAlert: CaseReducer<UiState, {
        payload: ObjRef;
        type: string;
    }>;
    openShareDialog: CaseReducer<UiState, AnyAction>;
    closeShareDialog: CaseReducer<UiState, AnyAction>;
    openDeleteDialog: CaseReducer<UiState, AnyAction>;
    closeDeleteDialog: CaseReducer<UiState, AnyAction>;
    openKpiDeleteDialog: CaseReducer<UiState, {
        payload: ILayoutCoordinates;
        type: string;
    }>;
    closeKpiDeleteDialog: CaseReducer<UiState, AnyAction>;
    setMenuButtonItemsVisibility: CaseReducer<UiState, {
        payload: IMenuButtonItemsVisibility;
        type: string;
    }>;
    selectWidget: CaseReducer<UiState, {
        payload: ObjRef;
        type: string;
    }>;
    clearWidgetSelection: CaseReducer<UiState, AnyAction>;
    setConfigurationPanelOpened: CaseReducer<UiState, {
        payload: boolean;
        type: string;
    }>;
    setKpiDateDatasetAutoOpen: CaseReducer<UiState, {
        payload: boolean;
        type: string;
    }>;
    requestInsightListUpdate: CaseReducer<UiState, AnyAction>;
    setWidgetLoadingAdditionalDataStarted: CaseReducer<UiState, {
        payload: ObjRef;
        type: string;
    }>;
    setWidgetLoadingAdditionalDataStopped: CaseReducer<UiState, {
        payload: ObjRef;
        type: string;
    }>;
    setFilterAttributeSelectionOpen: CaseReducer<UiState, {
        payload: boolean;
        type: string;
    }>;
    selectFilterIndex: CaseReducer<UiState, {
        payload: number;
        type: string;
    }>;
    clearFilterIndexSelection: CaseReducer<UiState, AnyAction>;
    setIsDraggingWidget: CaseReducer<UiState, {
        payload: boolean;
        type: string;
    }>;
    setActiveSectionIndex: CaseReducer<UiState, {
        payload: number;
        type: string;
    }>;
    clearActiveSectionIndex: CaseReducer<UiState, AnyAction>;
    openCancelEditModeDialog: CaseReducer<UiState, AnyAction>;
    closeCancelEditModeDialog: CaseReducer<UiState, AnyAction>;
};
//# sourceMappingURL=uiReducers.d.ts.map