// (C) 2022 GoodData Corporation
import { useCallback } from "react";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import { useDashboardDispatch, useDashboardSelector } from "./DashboardStoreProvider";
import { selectConfigurationPanelOpened, selectIsInEditMode, selectSelectedWidgetRef, uiActions, } from "../store";
/**
 * @internal
 */
export function useWidgetSelection(widgetRef) {
    var dispatch = useDashboardDispatch();
    var isConfigPanelOpen = useDashboardSelector(selectConfigurationPanelOpened);
    var isSelectable = useDashboardSelector(selectIsInEditMode);
    var selectedWidget = useDashboardSelector(selectSelectedWidgetRef);
    var isSelected = Boolean(isSelectable && selectedWidget && widgetRef && areObjRefsEqual(selectedWidget, widgetRef));
    var closeConfigPanel = useCallback(function () {
        dispatch(uiActions.setConfigurationPanelOpened(false));
    }, [dispatch]);
    var onSelected = useCallback(function (e) {
        if (e) {
            /**
             * Do not stop propagation, just mark event as processed here so that in case come other element
             * up the tree uses the deselectWidgets function. Without this mark such element would immediately
             * deselect the widget we just selected with the same click.
             */
            e.processedDuringWidgetSelect = true;
        }
        if (isSelectable && widgetRef) {
            dispatch(uiActions.selectWidget(widgetRef));
            dispatch(uiActions.setConfigurationPanelOpened(true));
        }
    }, [isSelectable, widgetRef, dispatch]);
    var deselectWidgets = useCallback(function (e) {
        var _a;
        if (!((_a = e) === null || _a === void 0 ? void 0 : _a.processedDuringWidgetSelect) && selectedWidget) {
            dispatch(uiActions.clearWidgetSelection());
        }
    }, [dispatch, selectedWidget]);
    return {
        isSelectable: isSelectable,
        isSelected: isSelected,
        onSelected: onSelected,
        hasConfigPanelOpen: isConfigPanelOpen && isSelected,
        closeConfigPanel: closeConfigPanel,
        deselectWidgets: deselectWidgets,
    };
}
//# sourceMappingURL=useWidgetSelection.js.map