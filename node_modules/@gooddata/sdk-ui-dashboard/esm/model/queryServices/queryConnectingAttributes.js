// (C) 2022 GoodData Corporation
import { __awaiter, __generator } from "tslib";
import { serializeObjRef } from "@gooddata/sdk-model";
import { call, select } from "redux-saga/effects";
import compact from "lodash/compact";
import { selectAttributeFilterDisplayFormsMap } from "../store";
import { createCachedQueryService } from "../store/_infra/queryService";
import { invalidQueryArguments } from "../events/general";
export var QueryConnectingAttributesService = createCachedQueryService("GDC.DASH/QUERY.CONNECTING.ATTRIBUTES", queryService, function (query) {
    var refs = query.payload.refs;
    var serializedRefs = refs.flatMap(function (refs) { return refs; }).map(serializeObjRef);
    return serializedRefs.join("&");
});
function loadConnectingAttributes(ctx, attributeRefs) {
    return __awaiter(this, void 0, void 0, function () {
        var backend, workspace;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    backend = ctx.backend, workspace = ctx.workspace;
                    return [4 /*yield*/, backend.workspace(workspace).attributes().getCommonAttributesBatch(attributeRefs)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function loadConnectingAttributesMeta(ctx, connectingAttributeRefs) {
    return __awaiter(this, void 0, void 0, function () {
        var backend, workspace, attributeMetaObjects;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    backend = ctx.backend, workspace = ctx.workspace;
                    return [4 /*yield*/, Promise.all(connectingAttributeRefs.map(function (refsEntry) {
                            return Promise.all(refsEntry.map(function (ref) { return backend.workspace(workspace).attributes().getAttribute(ref); }));
                        }))];
                case 1:
                    attributeMetaObjects = _a.sent();
                    return [2 /*return*/, attributeMetaObjects.map(function (entry) {
                            return entry.map(function (attributeMeta) {
                                return {
                                    title: attributeMeta.title,
                                    ref: attributeMeta.ref,
                                };
                            });
                        })];
            }
        });
    });
}
function mapDisplayFormsToAttributes(refs) {
    var attributeDisplayFormsMap;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, select(selectAttributeFilterDisplayFormsMap)];
            case 1:
                attributeDisplayFormsMap = _a.sent();
                return [2 /*return*/, refs.map(function (displayFormRefsEntry) {
                        return displayFormRefsEntry.map(function (displayFormRef) { var _a; return (_a = attributeDisplayFormsMap.get(displayFormRef)) === null || _a === void 0 ? void 0 : _a.attribute; });
                    })];
        }
    });
}
function queryService(ctx, query) {
    var refs, correlationId, attributeRefs, nonEmptyAttributesRef, connectingAttributesRefs, connectingAttributes;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                refs = query.payload.refs, correlationId = query.correlationId;
                return [4 /*yield*/, call(mapDisplayFormsToAttributes, refs)];
            case 1:
                attributeRefs = _a.sent();
                nonEmptyAttributesRef = compact(attributeRefs.map(function (refsEntry) { return compact(refsEntry); }));
                if (refs.length !== nonEmptyAttributesRef.length) {
                    throw invalidQueryArguments(ctx, "Cannot find attributes for given displayForms", correlationId);
                }
                return [4 /*yield*/, call(loadConnectingAttributes, ctx, nonEmptyAttributesRef)];
            case 2:
                connectingAttributesRefs = _a.sent();
                return [4 /*yield*/, call(loadConnectingAttributesMeta, ctx, connectingAttributesRefs)];
            case 3:
                connectingAttributes = _a.sent();
                return [2 /*return*/, connectingAttributes];
        }
    });
}
//# sourceMappingURL=queryConnectingAttributes.js.map