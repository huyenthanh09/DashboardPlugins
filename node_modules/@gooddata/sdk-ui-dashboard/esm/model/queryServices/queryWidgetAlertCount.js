import { __generator, __read } from "tslib";
// (C) 2021-2022 GoodData Corporation
import { objRefToString, isKpiWidget } from "@gooddata/sdk-model";
import { select, call } from "redux-saga/effects";
import { invalidQueryArguments } from "../events/general";
import { selectWidgetByRef } from "../store/layout/layoutSelectors";
import { createQueryService } from "../store/_infra/queryService";
export var QueryWidgetAlertCountService = createQueryService("GDC.DASH/QUERY.WIDGET.ALERT_COUNT", queryService);
function queryService(ctx, query) {
    var widgetRef, correlationId, widget, resultLoader, _a, result;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                widgetRef = query.payload.widgetRef, correlationId = query.correlationId;
                return [4 /*yield*/, select(selectWidgetByRef(widgetRef))];
            case 1:
                widget = _b.sent();
                if (!widget) {
                    throw invalidQueryArguments(ctx, "Widget with ref " + objRefToString(widgetRef) + " does not exist on the dashboard", correlationId);
                }
                if (!isKpiWidget(widget)) {
                    return [2 /*return*/, 0];
                }
                resultLoader = ctx.backend.workspace(ctx.workspace).dashboards();
                return [4 /*yield*/, call([resultLoader, resultLoader.getWidgetAlertsCountForWidgets], [widgetRef])];
            case 2:
                _a = __read.apply(void 0, [_b.sent(), 1]), result = _a[0];
                return [2 /*return*/, result.alertCount];
        }
    });
}
//# sourceMappingURL=queryWidgetAlertCount.js.map