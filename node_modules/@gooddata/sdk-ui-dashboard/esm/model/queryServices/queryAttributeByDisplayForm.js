// (C) 2022 GoodData Corporation
import { __awaiter, __generator } from "tslib";
import { areObjRefsEqual, serializeObjRef, } from "@gooddata/sdk-model";
import { createCachedQueryService } from "../store/_infra/queryService";
import { call, select } from "redux-saga/effects";
import { invalidQueryArguments } from "../events/general";
import { selectCatalogAttributes } from "../store";
export var QueryAttributeByDisplayFormService = createCachedQueryService("GDC.DASH/QUERY.DISPLAY.FORM.ATTRIBUTE", queryService, function (query) {
    var displayForms = query.payload.displayForms;
    return displayForms.map(function (df) { return serializeObjRef(df); }).join();
});
/**
 * Loads the attribute metadata for given display form. Primarily the metadata are loaded
 * from the catalog attributes. If the required attribute is not listed in the catalog
 * (e.g. deprecated attributes), the attribute metadata are fetched from the backend.
 */
function loadAttributeByDisplayForm(ctx, catalogAttributes, displayForm) {
    return __awaiter(this, void 0, void 0, function () {
        var backend, workspace, attribute;
        return __generator(this, function (_a) {
            backend = ctx.backend, workspace = ctx.workspace;
            attribute = catalogAttributes.find(function (catalogAttribute) {
                return catalogAttribute.displayForms.some(function (df) { return areObjRefsEqual(df, displayForm); });
            });
            if (attribute) {
                return [2 /*return*/, attribute.attribute];
            }
            return [2 /*return*/, backend.workspace(workspace).attributes().getAttributeByDisplayForm(displayForm)];
        });
    });
}
function loadAttributes(ctx, catalogAttributes, displayForms) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, Promise.all(displayForms.map(function (df) { return loadAttributeByDisplayForm(ctx, catalogAttributes, df); }))];
        });
    });
}
function queryService(ctx, query) {
    var displayForms, correlationId, catalogAttributes, attributes;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                displayForms = query.payload.displayForms, correlationId = query.correlationId;
                return [4 /*yield*/, select(selectCatalogAttributes)];
            case 1:
                catalogAttributes = _a.sent();
                return [4 /*yield*/, call(loadAttributes, ctx, catalogAttributes, displayForms)];
            case 2:
                attributes = _a.sent();
                if (!attributes) {
                    throw invalidQueryArguments(ctx, "Cannot find attribute for given displayForm", correlationId);
                }
                return [2 /*return*/, attributes];
        }
    });
}
//# sourceMappingURL=queryAttributeByDisplayForm.js.map