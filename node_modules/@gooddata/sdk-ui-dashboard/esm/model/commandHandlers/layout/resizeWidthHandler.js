// (C) 2021-2022 GoodData Corporation
import { __generator } from "tslib";
import { put, select } from "redux-saga/effects";
import { invalidArgumentsProvided } from "../../events/general";
import { getMinWidth } from "../../../_staging/layout/sizing";
import { selectInsightsMap } from "../../store/insights/insightsSelectors";
import { layoutActions } from "../../store/layout";
import { selectLayout } from "../../store/layout/layoutSelectors";
import { validateItemExists, validateSectionExists } from "./validation/layoutValidation";
import { layoutSectionItemWidthResized } from "../../events/layout";
import { DASHBOARD_LAYOUT_GRID_COLUMNS_COUNT } from "../../../_staging/dashboard/fluidLayout/config";
function validateLayoutIndexes(ctx, layout, command) {
    var _a = command.payload, sectionIndex = _a.sectionIndex, itemIndex = _a.itemIndex;
    if (!validateSectionExists(layout, sectionIndex)) {
        throw invalidArgumentsProvided(ctx, command, "Attempting to resize item from non-existent section at " + sectionIndex + ". There are only " + layout.sections.length + " sections.");
    }
    var fromSection = layout.sections[sectionIndex];
    if (!validateItemExists(fromSection, itemIndex)) {
        throw invalidArgumentsProvided(ctx, command, "Attempting to resize non-existent item from index " + itemIndex + " in section " + sectionIndex + ". There are only " + fromSection.items.length + " items in this section.");
    }
}
export function resizeWidthHandler(ctx, cmd) {
    var _a, sectionIndex, itemIndex, width, layout, insightsMap;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = cmd.payload, sectionIndex = _a.sectionIndex, itemIndex = _a.itemIndex, width = _a.width;
                return [4 /*yield*/, select(selectLayout)];
            case 1:
                layout = _b.sent();
                return [4 /*yield*/, select(selectInsightsMap)];
            case 2:
                insightsMap = _b.sent();
                validateLayoutIndexes(ctx, layout, cmd);
                validateWidth(ctx, layout, insightsMap, cmd);
                return [4 /*yield*/, put(layoutActions.changeItemWidth({
                        sectionIndex: sectionIndex,
                        itemIndex: itemIndex,
                        width: width,
                    }))];
            case 3:
                _b.sent();
                return [2 /*return*/, layoutSectionItemWidthResized(ctx, sectionIndex, itemIndex, width, cmd.correlationId)];
        }
    });
}
function validateWidth(ctx, layout, insightsMap, cmd) {
    var _a = cmd.payload, sectionIndex = _a.sectionIndex, itemIndex = _a.itemIndex, width = _a.width;
    var widget = layout.sections[sectionIndex].items[itemIndex].widget;
    var minLimit = getMinWidth(widget, insightsMap);
    var maxLimit = DASHBOARD_LAYOUT_GRID_COLUMNS_COUNT;
    var validHeight = width >= minLimit && width <= maxLimit;
    if (!validHeight) {
        throw invalidArgumentsProvided(ctx, cmd, "Attempting to set invalid width. Allowed width is from " + minLimit + " to " + maxLimit + ".");
    }
}
//# sourceMappingURL=resizeWidthHandler.js.map