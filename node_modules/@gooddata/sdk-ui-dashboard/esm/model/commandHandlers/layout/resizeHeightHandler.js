// (C) 2021-2022 GoodData Corporation
import { __generator } from "tslib";
import { put, select } from "redux-saga/effects";
import { invalidArgumentsProvided } from "../../events/general";
import { layoutSectionItemsHeightResized, } from "../../events/layout";
import { getMaxHeight, getMinHeight } from "../../../_staging/layout/sizing";
import { selectInsightsMap } from "../../store/insights/insightsSelectors";
import { layoutActions } from "../../store/layout";
import { selectLayout } from "../../store/layout/layoutSelectors";
import { validateItemExists, validateSectionExists } from "./validation/layoutValidation";
function validateLayoutIndexes(ctx, layout, command) {
    var _a = command.payload, sectionIndex = _a.sectionIndex, itemIndexes = _a.itemIndexes;
    if (!validateSectionExists(layout, sectionIndex)) {
        throw invalidArgumentsProvided(ctx, command, "Attempting to resize item from non-existent section at " + sectionIndex + ". There are only " + layout.sections.length + " sections.");
    }
    var fromSection = layout.sections[sectionIndex];
    itemIndexes.forEach(function (itemIndex) {
        if (!validateItemExists(fromSection, itemIndex)) {
            throw invalidArgumentsProvided(ctx, command, "Attempting to resize non-existent item from index " + itemIndex + " in section " + sectionIndex + ". There are only " + fromSection.items.length + " items in this section.");
        }
    });
}
export function resizeHeightHandler(ctx, cmd) {
    var _a, sectionIndex, itemIndexes, height, layout, insightsMap;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = cmd.payload, sectionIndex = _a.sectionIndex, itemIndexes = _a.itemIndexes, height = _a.height;
                return [4 /*yield*/, select(selectLayout)];
            case 1:
                layout = _b.sent();
                return [4 /*yield*/, select(selectInsightsMap)];
            case 2:
                insightsMap = _b.sent();
                validateLayoutIndexes(ctx, layout, cmd);
                validateHeight(ctx, layout, insightsMap, cmd);
                return [4 /*yield*/, put(layoutActions.changeItemsHeight({
                        sectionIndex: sectionIndex,
                        itemIndexes: itemIndexes,
                        height: height,
                    }))];
            case 3:
                _b.sent();
                return [2 /*return*/, layoutSectionItemsHeightResized(ctx, sectionIndex, itemIndexes, height, cmd.correlationId)];
        }
    });
}
function validateHeight(ctx, layout, insightsMap, cmd) {
    var _a = cmd.payload, sectionIndex = _a.sectionIndex, itemIndexes = _a.itemIndexes, height = _a.height;
    var widgets = itemIndexes.map(function (itemIndex) { return layout.sections[sectionIndex].items[itemIndex].widget; });
    var minLimit = getMinHeight(widgets, insightsMap);
    var maxLimit = getMaxHeight(widgets, insightsMap);
    var validHeight = height >= minLimit && height <= maxLimit;
    if (!validHeight) {
        throw invalidArgumentsProvided(ctx, cmd, "Attempting to set invalid height. Allowed height is from " + minLimit + " to " + maxLimit + ".");
    }
}
//# sourceMappingURL=resizeHeightHandler.js.map