// (C) 2019-2022 GoodData Corporation
import { __awaiter, __generator } from "tslib";
import { uriRef } from "@gooddata/sdk-model";
export function loadLegacyDashboards(ctx) {
    return __awaiter(this, void 0, void 0, function () {
        var dashboardResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getProjectDashboards(ctx.backend, ctx.workspace)];
                case 1:
                    dashboardResponse = _a.sent();
                    if (!dashboardResponse) {
                        return [2 /*return*/, []];
                    }
                    return [2 /*return*/, projectDashboardToLegacyDashboard(dashboardResponse)];
            }
        });
    });
}
function emptyPromise() {
    return Promise.resolve();
}
function unwrapDecoratedBackend(backend) {
    if (backend === null || backend === void 0 ? void 0 : backend.decorated) {
        return unwrapDecoratedBackend(backend.decorated);
    }
    return backend;
}
function getBackendAuthApiCallPrivateMethod(backend) {
    var _a;
    return (_a = backend.authApiCall) !== null && _a !== void 0 ? _a : emptyPromise;
}
function getBearProjectDashboardMethod(client) {
    var _a;
    var method = (_a = client === null || client === void 0 ? void 0 : client.md) === null || _a === void 0 ? void 0 : _a.getProjectDashboards.bind(client === null || client === void 0 ? void 0 : client.md);
    return method !== null && method !== void 0 ? method : emptyPromise;
}
function getProjectDashboards(backend, workspace) {
    return __awaiter(this, void 0, void 0, function () {
        var unwrappedBackend, authApiCall;
        var _this = this;
        return __generator(this, function (_a) {
            unwrappedBackend = unwrapDecoratedBackend(backend);
            authApiCall = getBackendAuthApiCallPrivateMethod(unwrappedBackend);
            return [2 /*return*/, authApiCall(function (client) { return __awaiter(_this, void 0, void 0, function () {
                    var projectDashboardMethod;
                    return __generator(this, function (_a) {
                        projectDashboardMethod = getBearProjectDashboardMethod(client);
                        return [2 /*return*/, projectDashboardMethod(workspace)];
                    });
                }); })];
        });
    });
}
function projectDashboardToLegacyDashboard(data) {
    return data.map(function (item) {
        var _a = item.projectDashboard, content = _a.content, meta = _a.meta;
        return {
            identifier: meta.identifier,
            uri: meta.uri,
            ref: uriRef(meta.uri),
            title: meta.title,
            tabs: content.tabs.map(function (tab) {
                return {
                    identifier: tab.identifier,
                    title: tab.title,
                };
            }),
        };
    });
}
//# sourceMappingURL=loadLegacyDashboards.js.map