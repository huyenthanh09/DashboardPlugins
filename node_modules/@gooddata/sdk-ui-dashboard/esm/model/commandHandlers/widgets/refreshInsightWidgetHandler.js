import { __generator } from "tslib";
// (C) 2022 GoodData Corporation
import { objRefToString } from "@gooddata/sdk-model";
import { call, put, select } from "redux-saga/effects";
import { selectWidgetsMap } from "../../store/layout/layoutSelectors";
import { selectInsightByRef } from "../../store/insights/insightsSelectors";
import { validateExistingInsightWidget } from "./validation/widgetValidations";
import { insightsActions } from "../../store/insights";
import { invalidArgumentsProvided } from "../../events/general";
import { insightWidgetRefreshed } from "../../events/insight";
function loadInsight(ctx, insightRef) {
    return ctx.backend.workspace(ctx.workspace).insights().getInsight(insightRef);
}
export function refreshInsightWidgetHandler(ctx, cmd) {
    var widgets, insightWidget, insightRef, insight, newInsight;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, select(selectWidgetsMap)];
            case 1:
                widgets = _a.sent();
                insightWidget = validateExistingInsightWidget(widgets, cmd, ctx);
                insightRef = insightWidget.insight;
                return [4 /*yield*/, select(selectInsightByRef(insightRef))];
            case 2:
                insight = _a.sent();
                if (!insight) {
                    throw invalidArgumentsProvided(ctx, cmd, "Insight with ref " + objRefToString(insightRef) + " was not found in the store.");
                }
                return [4 /*yield*/, call(loadInsight, ctx, insightRef)];
            case 3:
                newInsight = _a.sent();
                return [4 /*yield*/, put(insightsActions.upsertInsight(newInsight))];
            case 4:
                _a.sent();
                return [2 /*return*/, insightWidgetRefreshed(ctx, newInsight, cmd.correlationId)];
        }
    });
}
//# sourceMappingURL=refreshInsightWidgetHandler.js.map