import { __generator } from "tslib";
import { call, put, select } from "redux-saga/effects";
import { resetDashboard as resetDashboardCommand } from "../../commands";
import { renderModeChanged } from "../../events/renderMode";
import { renderModeActions } from "../../store/renderMode";
import { selectDashboardEditModeDevRollout } from "../../store/config/configSelectors";
import { resetDashboardHandler } from "../dashboard/resetDashboardHandler";
export function changeRenderModeHandler(ctx, cmd) {
    var _a, renderMode, renderModeChangeOptions, correlationId, editModeEnabled;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = cmd.payload, renderMode = _a.renderMode, renderModeChangeOptions = _a.renderModeChangeOptions, correlationId = cmd.correlationId;
                return [4 /*yield*/, select(selectDashboardEditModeDevRollout)];
            case 1:
                editModeEnabled = _b.sent();
                if (!(renderMode === "view" || editModeEnabled)) return [3 /*break*/, 5];
                return [4 /*yield*/, put(renderModeActions.setRenderMode(renderMode))];
            case 2:
                _b.sent();
                if (!renderModeChangeOptions.resetDashboard) return [3 /*break*/, 4];
                return [4 /*yield*/, call(resetDashboardHandler, ctx, resetDashboardCommand(correlationId))];
            case 3:
                _b.sent();
                _b.label = 4;
            case 4: return [2 /*return*/, renderModeChanged(ctx, renderMode, correlationId)];
            case 5: return [2 /*return*/, renderModeChanged(ctx, "view", correlationId)];
        }
    });
}
//# sourceMappingURL=changeRenderModeHandler.js.map