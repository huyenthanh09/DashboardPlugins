import React, { useRef, useCallback } from "react";
import { Row } from "react-grid-system";
import { HeightResizerHotspot } from "../../dragAndDrop";
import { DashboardLayoutItem } from "./DashboardLayoutItem";
export function DashboardLayoutGridRow(props) {
    var rowRef = useRef(null);
    var section = props.section, _a = props.itemKeyGetter, itemKeyGetter = _a === void 0 ? function (_a) {
        var item = _a.item;
        return item.index();
    } : _a, gridRowRenderer = props.gridRowRenderer, itemRenderer = props.itemRenderer, widgetRenderer = props.widgetRenderer, getLayoutDimensions = props.getLayoutDimensions, screen = props.screen, items = props.items, renderMode = props.renderMode;
    var rowItems = items.map(function (item) { return (React.createElement(DashboardLayoutItem, { key: itemKeyGetter({ item: item, screen: screen }), item: item, itemRenderer: itemRenderer, widgetRenderer: widgetRenderer, screen: screen })); });
    var getContainerDimensions = useCallback(function () {
        if (!rowRef.current) {
            return undefined;
        }
        return rowRef.current.getBoundingClientRect();
    }, []);
    return (React.createElement("div", { ref: rowRef },
        React.createElement(Row, { className: "gd-fluidlayout-row s-gd-fluid-layout-row" },
            gridRowRenderer
                ? gridRowRenderer({
                    children: rowItems,
                    screen: screen,
                    section: section,
                    items: items,
                    renderMode: renderMode,
                })
                : rowItems,
            renderMode === "edit" && (React.createElement(HeightResizerHotspot, { section: section, items: items, screen: screen, getContainerDimensions: getContainerDimensions, getLayoutDimensions: getLayoutDimensions })))));
}
//# sourceMappingURL=DashboardLayoutGridRow.js.map