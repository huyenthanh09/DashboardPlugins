// (C) 2022 GoodData Corporation
import { __read } from "tslib";
import { useDrag } from "react-dnd";
import { useEffect, useRef } from "react";
import { getEmptyImage } from "react-dnd-html5-backend";
import isFunction from "lodash/isFunction";
function basicDragCollect(monitor) {
    return {
        isDragging: monitor.isDragging(),
        item: monitor.getItem(),
    };
}
export function useDashboardDrag(_a, deps) {
    var dragItem = _a.dragItem, _b = _a.canDrag, canDrag = _b === void 0 ? true : _b, _c = _a.hideDefaultPreview, hideDefaultPreview = _c === void 0 ? true : _c, dragEnd = _a.dragEnd, dragStart = _a.dragStart;
    if (deps === void 0) { deps = []; }
    var _d = __read(useDrag(function () {
        var item = isFunction(dragItem) ? dragItem() : dragItem;
        return {
            type: item.type,
            item: dragItem,
            collect: basicDragCollect,
            canDrag: canDrag,
            end: dragEnd,
        };
    }, deps), 3), collectedProps = _d[0], dragRef = _d[1], dragPreviewRef = _d[2];
    var hasHandledStart = useRef(false);
    useEffect(function () {
        if (collectedProps.isDragging) {
            if (!hasHandledStart.current && dragStart) {
                var item = isFunction(dragItem) ? dragItem() : dragItem;
                hasHandledStart.current = true;
                dragStart(item);
            }
        }
        else {
            hasHandledStart.current = false;
        }
    }, [collectedProps.isDragging]);
    useEffect(function () {
        if (hideDefaultPreview) {
            // this is the way how to hide native drag preview, custom preview is rendered by DragLayer
            dragPreviewRef(getEmptyImage(), { captureDraggingState: false });
        }
    }, [dragPreviewRef, hideDefaultPreview]);
    return [collectedProps, dragRef];
}
//# sourceMappingURL=useDashboardDrag.js.map