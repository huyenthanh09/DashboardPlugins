import { __read } from "tslib";
import React, { useEffect, useMemo, useState } from "react";
import { useDashboardDrag } from "../useDashboardDrag";
import { resizeWidth, selectInsightsMap, useDashboardDispatch, useDashboardSelector } from "../../../model";
import { getMinWidth } from "../../../_staging/layout/sizing";
import { getDashboardLayoutItemMaxGridWidth } from "../../layout/DefaultDashboardLayoutRenderer/utils/sizing";
import { getSizeAndXCoords } from "../DragLayerPreview/WidthResizerDragPreview";
import { useResizeHandlers, useResizeWidthItemStatus } from "../LayoutResizeContext";
import { WidthResizer } from "./WidthResizer";
export function WidthResizerHotspot(_a) {
    var item = _a.item, screen = _a.screen, getGridColumnWidth = _a.getGridColumnWidth, getGridColumnHeightInPx = _a.getGridColumnHeightInPx, getLayoutDimensions = _a.getLayoutDimensions;
    var dispatch = useDashboardDispatch();
    var insightsMap = useDashboardSelector(selectInsightsMap);
    var _b = useResizeHandlers(), resizeStart = _b.resizeStart, resizeEnd = _b.resizeEnd, getScrollCorrection = _b.getScrollCorrection;
    var widget = useMemo(function () { return item.widget(); }, [item]);
    var widgetIdentifier = widget.identifier;
    var _c = useResizeWidthItemStatus(widgetIdentifier), isWidthResizing = _c.isWidthResizing, isActive = _c.isActive;
    var _d = __read(useState(false), 2), isResizerVisible = _d[0], setResizerVisibility = _d[1];
    var onMouseEnter = function () { return setResizerVisibility(true); };
    var onMouseLeave = function () { return setResizerVisibility(false); };
    var sectionIndex = item.section().index();
    var itemIndex = item.index();
    var currentWidth = item.sizeForScreen(screen).gridWidth;
    var minLimit = getMinWidth(widget, insightsMap);
    var maxLimit = getDashboardLayoutItemMaxGridWidth(item, "xl");
    var _e = __read(useDashboardDrag({
        dragItem: function () {
            var initialLayoutDimensions = getLayoutDimensions();
            return {
                type: "internal-width-resizer",
                sectionIndex: sectionIndex,
                itemIndex: itemIndex,
                gridColumnHeightInPx: getGridColumnHeightInPx(),
                gridColumnWidth: getGridColumnWidth(),
                initialLayoutDimensions: initialLayoutDimensions,
                currentWidth: currentWidth,
                minLimit: minLimit,
                maxLimit: maxLimit,
            };
        },
        dragEnd: function (dragItem, monitor) {
            var scrollCorrection = getScrollCorrection();
            var limitedSize = getSizeAndXCoords(dragItem, monitor.getInitialClientOffset().x, monitor.getDifferenceFromInitialOffset().x, scrollCorrection.x).limitedSize;
            dispatch(resizeWidth(sectionIndex, itemIndex, limitedSize));
            setResizerVisibility(false);
        },
    }, [widget, insightsMap]), 2), isDragging = _e[0].isDragging, dragRef = _e[1];
    useEffect(function () {
        if (isDragging) {
            resizeStart("width", [widgetIdentifier], getLayoutDimensions);
        }
        else {
            resizeEnd();
        }
    }, [isDragging]);
    var isThisResizing = isWidthResizing && isActive;
    var showHotspot = !isDragging || isWidthResizing;
    var showResizer = isResizerVisible || isThisResizing;
    var status = isDragging ? "muted" : "active";
    if (!showHotspot) {
        return null;
    }
    return (React.createElement("div", { className: "dash-width-resizer-container" },
        React.createElement("div", { className: "s-dash-width-resizer-hotspot dash-width-resizer-hotspot", onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, ref: dragRef }, showResizer && React.createElement(WidthResizer, { status: status }))));
}
//# sourceMappingURL=WidthResizerHotspot.js.map