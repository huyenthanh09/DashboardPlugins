import { __read, __spread } from "tslib";
// (C) 2021-2022 GoodData Corporation
import React, { useEffect, useMemo, useState } from "react";
import { fluidLayoutDescriptor } from "@gooddata/sdk-ui-ext";
import isEqual from "lodash/fp/isEqual";
import isEmpty from "lodash/isEmpty";
import { useDashboardDrag } from "../useDashboardDrag";
import { resizeHeight, selectInsightsMap, useDashboardDispatch, useDashboardSelector } from "../../../model";
import { getMaxHeight, getMinHeight } from "../../../_staging/layout/sizing";
import { HeightResizer } from "./HeightResizer";
import { useResizeContext } from "../LayoutResizeContext";
export function HeightResizerHotspot(_a) {
    var section = _a.section, items = _a.items, screen = _a.screen, getContainerDimensions = _a.getContainerDimensions, getLayoutDimensions = _a.getLayoutDimensions;
    var dispatch = useDashboardDispatch();
    var insightsMap = useDashboardSelector(selectInsightsMap);
    var _b = useResizeContext(), resizeDirection = _b.resizeDirection, resizeItemIdentifiers = _b.resizeItemIdentifiers, resizeStart = _b.resizeStart, resizeEnd = _b.resizeEnd, getScrollCorrection = _b.getScrollCorrection;
    var widgets = useMemo(function () { return items.map(function (item) { return item.widget(); }); }, [items]);
    var widgetIdentifiers = widgets.map(function (widget) { return widget.identifier; });
    var _c = __read(useDashboardDrag({
        dragItem: function () {
            var _a, _b;
            var initialLayoutDimensions = getLayoutDimensions();
            var minLimit = getMinHeight(widgets, insightsMap);
            var maxLimit = getMaxHeight(widgets, insightsMap);
            var heightsGR = getHeightsGR(items, screen, (_b = (_a = getContainerDimensions()) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 100);
            return {
                type: "internal-height-resizer",
                sectionIndex: section.index(),
                itemIndexes: items.map(function (item) { return item.index(); }),
                initialLayoutDimensions: initialLayoutDimensions,
                widgetHeights: heightsGR,
                minLimit: minLimit,
                maxLimit: maxLimit,
            };
        },
        dragEnd: function (item, monitor) {
            var _a;
            var scrollCorrection = getScrollCorrection();
            var sectionIndex = item.sectionIndex, itemIndexes = item.itemIndexes, widgetHeights = item.widgetHeights;
            var minLimit = getMinHeight(widgets, insightsMap);
            var maxLimit = getMaxHeight(widgets, insightsMap);
            var newHeightGR = getNewHeightGR(widgetHeights, ((_a = monitor.getDifferenceFromInitialOffset()) === null || _a === void 0 ? void 0 : _a.y) || 0, scrollCorrection.y, minLimit, maxLimit);
            dispatch(resizeHeight(sectionIndex, itemIndexes, newHeightGR));
            resizeEnd();
        },
    }, [widgets, insightsMap]), 2), isDragging = _c[0].isDragging, dragRef = _c[1];
    useEffect(function () {
        if (isDragging) {
            resizeStart("height", widgetIdentifiers);
        }
    }, [isDragging]);
    var areWidgetsResizing = resizeDirection !== "none";
    var isColumnResizing = resizeDirection === "width";
    var isOtherRowResizing = !isEmpty(resizeItemIdentifiers) && !isEqual(resizeItemIdentifiers, widgetIdentifiers);
    var _d = __read(useState(false), 2), isResizerVisible = _d[0], setResizerVisibility = _d[1];
    var onMouseEnter = function () { return setResizerVisibility(true); };
    var onMouseLeave = function () { return setResizerVisibility(false); };
    var shouldRenderResizer = (areWidgetsResizing || isResizerVisible) && !isColumnResizing && !isOtherRowResizing;
    var status = isDragging ? "muted" : "active";
    return (React.createElement("div", { className: "dash-height-resizer-container s-dash-height-resizer-container" },
        React.createElement("div", { ref: dragRef, className: "s-dash-height-resizer-hotspot dash-height-resizer-hotspot", onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave }, shouldRenderResizer && React.createElement(HeightResizer, { status: status }))));
}
export function getHeightsGR(widgets, screen, widgetHeightPX) {
    return widgets.reduce(function (acc, widget) {
        var _a, _b;
        var curHeightGR = fluidLayoutDescriptor.toGridHeight(widgetHeightPX);
        var gridHeight = (_b = (_a = widget.sizeForScreen(screen)) === null || _a === void 0 ? void 0 : _a.gridHeight) !== null && _b !== void 0 ? _b : curHeightGR;
        return __spread(acc, [gridHeight]);
    }, []);
}
export function getNewHeightGR(widgetHeights, offsetYPX, scrollCorrectionY, minLimit, maxLimit) {
    var currentWidth = Math.max.apply(Math, __spread(widgetHeights));
    var deltaHeightGR = fluidLayoutDescriptor.toGridHeight(offsetYPX - scrollCorrectionY);
    return Math.min(maxLimit, Math.max(minLimit, currentWidth + deltaHeightGR));
}
//# sourceMappingURL=HeightResizerHotspot.js.map