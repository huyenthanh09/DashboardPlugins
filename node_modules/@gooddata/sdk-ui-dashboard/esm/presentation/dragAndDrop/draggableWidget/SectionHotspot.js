import { __assign, __read } from "tslib";
// (C) 2022 GoodData Corporation
import React from "react";
import cx from "classnames";
import { getDropZoneDebugStyle } from "../debug";
import { eagerRemoveSectionItem, selectWidgetPlaceholderCoordinates, useDashboardDispatch, useDashboardSelector, } from "../../../model";
import { useDashboardDrop } from "../useDashboardDrop";
import { SectionDropZoneBox } from "./SectionDropZoneBox";
import { isInsightDraggableListItem, isInsightPlaceholderDraggableItem, isKpiPlaceholderDraggableItem, } from "../../dragAndDrop/types";
import { useNewSectionInsightListItemDropHandler } from "./useNewSectionInsightListItemDropHandler";
import { useNewSectionInsightPlaceholderDropHandler } from "./useNewSectionInsightPlaceholderDropHandler";
import { useNewSectionKpiPlaceholderDropHandler } from "./useNewSectionKpiPlaceholderDropHandler";
export var SectionHotspot = function (props) {
    var index = props.index, targetPosition = props.targetPosition;
    var dispatch = useDashboardDispatch();
    var widgetPlaceholderCoords = useDashboardSelector(selectWidgetPlaceholderCoordinates);
    var handleInsightListItemDrop = useNewSectionInsightListItemDropHandler(index);
    var handleKpiPlaceholderDrop = useNewSectionKpiPlaceholderDropHandler(index);
    var handleInsightPlaceholderDrop = useNewSectionInsightPlaceholderDropHandler(index);
    var _a = __read(useDashboardDrop(["insightListItem", "kpi-placeholder", "insight-placeholder"], {
        drop: function (item) {
            if (isInsightDraggableListItem(item)) {
                handleInsightListItemDrop(item.insight);
            }
            if (isKpiPlaceholderDraggableItem(item)) {
                handleKpiPlaceholderDrop();
            }
            if (isInsightPlaceholderDraggableItem(item)) {
                handleInsightPlaceholderDrop();
            }
        },
        hover: function () {
            if (widgetPlaceholderCoords) {
                dispatch(eagerRemoveSectionItem(widgetPlaceholderCoords.sectionIndex, widgetPlaceholderCoords.itemIndex));
            }
        },
    }, [
        dispatch,
        widgetPlaceholderCoords,
        index,
        handleInsightListItemDrop,
        handleKpiPlaceholderDrop,
        handleInsightPlaceholderDrop,
    ]), 2), _b = _a[0], canDrop = _b.canDrop, isOver = _b.isOver, dropRef = _a[1];
    if (!canDrop) {
        return null;
    }
    var isLast = targetPosition === "below";
    var debugStyle = getDropZoneDebugStyle({ isOver: isOver });
    return (React.createElement("div", { className: cx("row-hotspot-container", {
            last: isLast && canDrop,
            "s-last-drop-position": isLast && canDrop,
            hidden: !canDrop,
        }) },
        React.createElement("div", { className: cx("row-hotspot", { hidden: !canDrop }), style: __assign({}, debugStyle), ref: dropRef }, !!isOver && React.createElement(SectionDropZoneBox, { isOver: isOver }))));
};
//# sourceMappingURL=SectionHotspot.js.map