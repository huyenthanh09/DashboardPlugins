// (C) 2022 GoodData Corporation
import { useCallback } from "react";
import { insightRef, insightTitle } from "@gooddata/sdk-model";
import invariant from "ts-invariant";
import { selectSettings, useDashboardDispatch, useDashboardSelector, useDashboardCommandProcessing, uiActions, replaceSectionItem, enableInsightWidgetDateFilter, selectWidgetPlaceholderCoordinates, } from "../../../model";
import { getSizeInfo } from "../../../_staging/layout/sizing";
export function useInsightListItemDropHandler() {
    var dispatch = useDashboardDispatch();
    var settings = useDashboardSelector(selectSettings);
    var widgetPlaceholderCoords = useDashboardSelector(selectWidgetPlaceholderCoordinates);
    var preselectDateDataset = useDashboardCommandProcessing({
        commandCreator: enableInsightWidgetDateFilter,
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        successEvent: "GDC.DASH/EVT.INSIGHT_WIDGET.FILTER_SETTINGS_CHANGED",
        onSuccess: function (event) {
            dispatch(uiActions.setWidgetLoadingAdditionalDataStopped(event.payload.ref));
        },
        onError: function (event) {
            dispatch(uiActions.setWidgetLoadingAdditionalDataStopped(event.payload.command.payload.ref));
        },
    }).run;
    var replaceInsightOntoPlaceholder = useDashboardCommandProcessing({
        commandCreator: replaceSectionItem,
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        successEvent: "GDC.DASH/EVT.FLUID_LAYOUT.ITEM_REPLACED",
        onSuccess: function (event) {
            var ref = event.payload.items[0].widget.ref;
            dispatch(uiActions.selectWidget(ref));
            dispatch(uiActions.setConfigurationPanelOpened(true));
            dispatch(uiActions.setWidgetLoadingAdditionalDataStarted(ref));
            preselectDateDataset(ref, "default");
        },
    }).run;
    return useCallback(function (insight) {
        invariant(widgetPlaceholderCoords, "cannot drop onto placeholder, there is none");
        var sizeInfo = getSizeInfo(settings, "insight", insight);
        replaceInsightOntoPlaceholder(widgetPlaceholderCoords.sectionIndex, widgetPlaceholderCoords.itemIndex, {
            type: "IDashboardLayoutItem",
            widget: {
                type: "insight",
                insight: insightRef(insight),
                ignoreDashboardFilters: [],
                drills: [],
                title: insightTitle(insight),
                description: "",
                configuration: { hideTitle: false },
                properties: {},
            },
            size: {
                xl: {
                    gridHeight: sizeInfo.height.default,
                    gridWidth: sizeInfo.width.default,
                },
            },
        });
    }, [replaceInsightOntoPlaceholder, settings, widgetPlaceholderCoords]);
}
//# sourceMappingURL=useInsightListItemDropHandler.js.map