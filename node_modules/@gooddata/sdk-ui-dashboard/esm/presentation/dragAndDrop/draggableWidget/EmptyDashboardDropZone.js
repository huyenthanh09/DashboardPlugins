import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import React from "react";
import { FormattedMessage } from "react-intl";
import cx from "classnames";
import { Typography } from "@gooddata/sdk-ui-kit";
import { useDashboardDrop } from "../useDashboardDrop";
import { isInsightDraggableListItem, isInsightPlaceholderDraggableItem, isKpiPlaceholderDraggableItem, } from "../types";
import { useDashboardDispatch, useDashboardSelector, selectWidgetPlaceholder } from "../../../model";
import { useInsightListItemDropHandler } from "./useInsightListItemDropHandler";
import { useInsightPlaceholderDropHandler } from "./useInsightPlaceholderDropHandler";
import { useKpiPlaceholderDropHandler } from "./useKpiPlaceholderDropHandler";
import { useDashboardComponentsContext } from "../../dashboardContexts";
var widgetCategoryMapping = {
    "insight-placeholder": "insight",
    insightListItem: "visualization",
    "kpi-placeholder": "kpi",
};
export var EmptyDashboardDropZone = function () {
    var _a;
    var dispatch = useDashboardDispatch();
    var widgetPlaceholder = useDashboardSelector(selectWidgetPlaceholder);
    var EmptyLayoutDropZoneBodyComponent = useDashboardComponentsContext().EmptyLayoutDropZoneBodyComponent;
    var handleInsightListItemDrop = useInsightListItemDropHandler();
    var handleKpiPlaceholderDrop = useKpiPlaceholderDropHandler();
    var handleInsightPlaceholderDrop = useInsightPlaceholderDropHandler();
    var _b = __read(useDashboardDrop(["insightListItem", "kpi-placeholder", "insight-placeholder"], {
        drop: function (item) {
            if (isInsightDraggableListItem(item)) {
                handleInsightListItemDrop(item.insight);
            }
            if (isKpiPlaceholderDraggableItem(item)) {
                handleKpiPlaceholderDrop();
            }
            if (isInsightPlaceholderDraggableItem(item)) {
                handleInsightPlaceholderDrop();
            }
        },
    }, [
        dispatch,
        widgetPlaceholder,
        handleInsightListItemDrop,
        handleKpiPlaceholderDrop,
        handleInsightPlaceholderDrop,
    ]), 2), _c = _b[0], canDrop = _c.canDrop, isOver = _c.isOver, itemType = _c.itemType, dropRef = _b[1];
    var message = React.createElement(FormattedMessage, { id: "newDashboard.dropInsight" });
    var widgetCategory = widgetCategoryMapping[itemType];
    return (React.createElement("div", { className: cx("drag-info-placeholder", "dash-item", (_a = {},
            _a["type-" + widgetCategory] = !!widgetCategory,
            _a["type-none"] = !widgetCategory,
            _a["s-last-drop-position"] = canDrop,
            _a)), ref: dropRef },
        React.createElement("div", { className: cx("drag-info-placeholder-inner", { "can-drop": canDrop, "is-over": isOver }) },
            React.createElement(EmptyLayoutDropZoneBodyComponent, null),
            React.createElement("div", { className: "drag-info-placeholder-drop-target s-drag-info-placeholder-drop-target" },
                React.createElement("div", { className: "drop-target-inner" },
                    React.createElement(Typography, { tagName: "p", className: "drop-target-message kpi-drop-target" }, message),
                    React.createElement(Typography, { tagName: "p", className: "drop-target-message visualization-drop-target" }, message))))));
};
//# sourceMappingURL=EmptyDashboardDropZone.js.map