import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import React from "react";
import invariant from "ts-invariant";
import { selectLayout, selectSettings, selectWidgetCoordinatesByRef, useDashboardDispatch, useDashboardSelector, } from "../../../model";
import { useDashboardDrop } from "../useDashboardDrop";
import { WidgetDropZoneBox } from "./WidgetDropZoneBox";
import { isPlaceholderWidget } from "../../../widgets";
import { isInsightDraggableListItem, isInsightPlaceholderDraggableItem, isKpiPlaceholderDraggableItem, } from "../types";
import { useKpiPlaceholderDropHandler } from "./useKpiPlaceholderDropHandler";
import { useInsightListItemDropHandler } from "./useInsightListItemDropHandler";
import { useInsightPlaceholderDropHandler } from "./useInsightPlaceholderDropHandler";
export var WidgetDropZone = function (props) {
    var _a;
    var widget = props.widget;
    invariant(isPlaceholderWidget(widget));
    var dispatch = useDashboardDispatch();
    var settings = useDashboardSelector(selectSettings);
    var coords = useDashboardSelector(selectWidgetCoordinatesByRef(widget.ref));
    var layout = useDashboardSelector(selectLayout);
    var isLastInSection = coords.itemIndex === ((_a = layout.sections[coords.sectionIndex]) === null || _a === void 0 ? void 0 : _a.items.length) - 1;
    var handleInsightListItemDrop = useInsightListItemDropHandler();
    var handleInsightPlaceholderDrop = useInsightPlaceholderDropHandler();
    var handleKpiPlaceholderDrop = useKpiPlaceholderDropHandler();
    var _b = __read(useDashboardDrop(["insightListItem", "kpi-placeholder", "insight-placeholder"], {
        drop: function (item) {
            if (isInsightDraggableListItem(item)) {
                handleInsightListItemDrop(item.insight);
            }
            if (isKpiPlaceholderDraggableItem(item)) {
                handleKpiPlaceholderDrop();
            }
            if (isInsightPlaceholderDraggableItem(item)) {
                handleInsightPlaceholderDrop();
            }
        },
    }, [
        dispatch,
        settings,
        handleInsightListItemDrop,
        handleInsightPlaceholderDrop,
        handleKpiPlaceholderDrop,
    ]), 2), dropRef = _b[1];
    return (React.createElement("div", { className: "widget-dropzone", ref: dropRef },
        React.createElement(WidgetDropZoneBox, { isLast: isLastInSection })));
};
//# sourceMappingURL=WidgetDropZone.js.map