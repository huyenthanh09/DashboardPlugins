import { __assign } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useCallback, useEffect, useMemo, useRef } from "react";
import { useDragLayer } from "react-dnd";
import { ContentDragPreview } from "./DragLayerPreview/ContentDragPreview";
import { HeightResizerDragPreview } from "./DragLayerPreview/HeightResizerDragPreview";
import { WidthResizerDragPreview } from "./DragLayerPreview/WidthResizerDragPreview";
import { useScrollCorrection } from "./Resize/useScrollCorrection";
import { isDraggableInternalItemType } from "./types";
import { emptyDOMRect } from "../layout/constants";
import { useResizeHandlers } from "./LayoutResizeContext";
var previewComponentsMap = {
    "internal-height-resizer": HeightResizerDragPreview,
    "internal-width-resizer": WidthResizerDragPreview,
};
export var DragLayerComponent = function () {
    var dragLayerRef = useRef(null);
    var setScrollCorrection = useResizeHandlers().setScrollCorrection;
    var dragLayerProperties = useDragLayer(function (monitor) { return ({
        item: monitor.getItem(),
        itemType: monitor.getItemType(),
        currentOffset: monitor.getSourceClientOffset(),
        initialOffset: monitor.getInitialSourceClientOffset(),
        differenceFromInitialOffset: monitor.getDifferenceFromInitialOffset(),
        isDragging: monitor.isDragging(),
    }); });
    var itemType = dragLayerProperties.itemType, isDragging = dragLayerProperties.isDragging;
    var getDragLayerPosition = useCallback(function () {
        var _a, _b;
        return (_b = (_a = dragLayerRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) !== null && _b !== void 0 ? _b : emptyDOMRect;
    }, [dragLayerRef.current]);
    var isResizing = itemType === "internal-height-resizer" || itemType === "internal-width-resizer";
    var scrollCorrection = useScrollCorrection(getDragLayerPosition, isDragging && isResizing).scrollCorrection;
    useEffect(function () {
        setScrollCorrection(scrollCorrection);
    }, [scrollCorrection, setScrollCorrection]);
    var layerStyles = useMemo(function () {
        var position = isResizing ? "relative" : "fixed";
        return {
            position: position,
            pointerEvents: "none",
            zIndex: 5001,
            left: 0,
            top: 0,
            width: "100%",
            height: "100%",
        };
    }, [itemType]);
    if (!isDragging) {
        return null;
    }
    var Component = isDraggableInternalItemType(itemType)
        ? previewComponentsMap[itemType]
        : ContentDragPreview;
    var previewProps = isDraggableInternalItemType(itemType)
        ? __assign(__assign({}, dragLayerProperties), { getDragLayerPosition: getDragLayerPosition, scrollCorrection: scrollCorrection }) : dragLayerProperties;
    return (React.createElement("div", { style: layerStyles, ref: dragLayerRef },
        React.createElement(Component, __assign({}, previewProps))));
};
//# sourceMappingURL=DragLayer.js.map