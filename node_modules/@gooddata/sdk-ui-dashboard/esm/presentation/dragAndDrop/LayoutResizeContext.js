import { __assign, __read } from "tslib";
// (C) 2022 GoodData Corporation
import React, { createContext, useCallback, useContext, useRef, useState } from "react";
import noop from "lodash/noop";
import { emptyDOMRect } from "../layout/constants";
var initState = {
    resizeDirection: "none",
    resizeItemIdentifiers: [],
    heightLimitReached: "none",
    widthState: null,
    initialDashboardDimensions: emptyDOMRect,
};
var LayoutResizeStateContext = createContext({
    resizeDirection: "none",
    resizeItemIdentifiers: [],
    heightLimitReached: "none",
    widthState: null,
    initialDashboardDimensions: emptyDOMRect,
    resizeStart: noop,
    resizeEnd: noop,
    setScrollCorrection: noop,
    getScrollCorrection: function () { return ({ x: 0, y: 0 }); },
    setWidthState: noop,
    toggleHeightLimitReached: noop,
});
export function LayoutResizeStateProvider(_a) {
    var children = _a.children;
    var scrollingCorrectionRef = useRef({ x: 0, y: 0 });
    var _b = __read(useState(initState), 2), resizeState = _b[0], setResizeState = _b[1];
    var resizeStart = useCallback(function (direction, identifiers, getDashboardDimensions) {
        setResizeState({
            heightLimitReached: "none",
            initialDashboardDimensions: getDashboardDimensions ? getDashboardDimensions() : emptyDOMRect,
            resizeDirection: direction,
            resizeItemIdentifiers: identifiers,
            widthState: null,
        });
    }, []);
    var toggleHeightLimitReached = useCallback(function (heightLimitReached) {
        setResizeState(function (state) { return (__assign(__assign({}, state), { heightLimitReached: heightLimitReached })); });
    }, []);
    var setWidthState = useCallback(function (widthState) {
        setResizeState(function (state) { return (__assign(__assign({}, state), { widthState: widthState })); });
    }, []);
    var setScrollCorrection = useCallback(function (scrollCorrection) {
        scrollingCorrectionRef.current = scrollCorrection;
    }, []);
    var getScrollCorrection = useCallback(function () {
        return scrollingCorrectionRef.current;
    }, []);
    var resizeEnd = useCallback(function () {
        setResizeState(initState);
    }, []);
    return (React.createElement(LayoutResizeStateContext.Provider, { value: __assign(__assign({}, resizeState), { resizeStart: resizeStart,
            resizeEnd: resizeEnd,
            setScrollCorrection: setScrollCorrection,
            getScrollCorrection: getScrollCorrection,
            setWidthState: setWidthState,
            toggleHeightLimitReached: toggleHeightLimitReached }) }, children));
}
export function useResizeContext() {
    return useContext(LayoutResizeStateContext);
}
export function useResizeHandlers() {
    var context = useResizeContext();
    return {
        resizeStart: context.resizeStart,
        toggleHeightLimitReached: context.toggleHeightLimitReached,
        resizeEnd: context.resizeEnd,
        setWidthState: context.setWidthState,
        setScrollCorrection: context.setScrollCorrection,
        getScrollCorrection: context.getScrollCorrection,
    };
}
export function useResizeItemStatus(identifier) {
    var _a, _b;
    var context = useResizeContext();
    return {
        isActive: context.resizeItemIdentifiers.includes(identifier),
        isResizingColumnOrRow: context.resizeDirection !== "none",
        heightLimitReached: context.heightLimitReached,
        widthLimitReached: (_b = (_a = context.widthState) === null || _a === void 0 ? void 0 : _a.limitReached) !== null && _b !== void 0 ? _b : "none",
        initialDashboardDimensions: context.initialDashboardDimensions,
    };
}
export function useResizeWidthItemStatus(identifier) {
    var context = useResizeContext();
    return {
        isWidthResizing: context.resizeDirection === "width",
        isActive: context.resizeItemIdentifiers.includes(identifier),
        widthState: context.widthState,
    };
}
export function useResizeWidthStatus() {
    var context = useResizeContext();
    return __assign({ isResizingWidth: context.resizeDirection === "width" }, context.widthState);
}
//# sourceMappingURL=LayoutResizeContext.js.map