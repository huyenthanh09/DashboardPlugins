import { DropTargetMonitor, DropTargetHookSpec } from "react-dnd";
import { DraggableItemType, DraggableItemTypeMapping } from "./types";
declare type DashboardDropTargetHookSpec<DragObject, CollectedProps> = Pick<DropTargetHookSpec<DragObject, void, CollectedProps>, "canDrop" | "drop" | "hover">;
declare const basicDropCollect: (monitor: DropTargetMonitor) => {
    isOver: boolean;
    canDrop: boolean;
    itemType: DraggableItemType;
    item: unknown;
};
export declare function useDashboardDrop<DragType extends DraggableItemType, DragObject = DraggableItemTypeMapping[DragType], CollectedProps = ReturnType<typeof basicDropCollect>>(draggableItemTypes: DragType | DragType[], specArg: DashboardDropTargetHookSpec<DragObject, CollectedProps>, deps?: unknown[]): [{
    isOver: boolean;
    canDrop: boolean;
    itemType: DraggableItemType;
    item: unknown;
}, import("react-dnd").DragElementWrapper<any>];
export {};
//# sourceMappingURL=useDashboardDrop.d.ts.map