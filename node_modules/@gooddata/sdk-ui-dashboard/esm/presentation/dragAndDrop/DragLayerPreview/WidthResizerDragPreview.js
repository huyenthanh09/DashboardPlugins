import { __assign } from "tslib";
// (C) 2019-2022 GoodData Corporation
import React, { useEffect } from "react";
import { WidthResizer } from "../Resize/WidthResizer";
import { applySizeLimitation } from "./sizeLimiting";
import { useResizeHandlers } from "../LayoutResizeContext";
export function WidthResizerDragPreview(props) {
    var setWidthState = useResizeHandlers().setWidthState;
    var item = props.item, differenceFromInitialOffset = props.differenceFromInitialOffset, initialOffset = props.initialOffset, scrollCorrection = props.scrollCorrection, getDragLayerPosition = props.getDragLayerPosition;
    var gridColumnHeightInPx = item.gridColumnHeightInPx;
    var sizeAndCoords = getSizeAndXCoords(item, initialOffset.x, differenceFromInitialOffset.x, scrollCorrection.x);
    var style = getWidthResizerStyle({
        gridColumnHeightInPx: gridColumnHeightInPx,
        initialOffset: initialOffset,
        limitedX: sizeAndCoords.limitedX,
        dragLayerOffset: getDragLayerPosition(),
        scrollCorrection: scrollCorrection,
    });
    useEffect(function () {
        setWidthState({
            initialIndex: sizeAndCoords.initialIndex,
            currentIndex: sizeAndCoords.currentIndex,
            limitReached: sizeAndCoords.limitReached,
        });
    }, [sizeAndCoords.initialIndex, sizeAndCoords.currentIndex, sizeAndCoords.isLimited, setWidthState]);
    return (React.createElement("div", { className: "s-resizer-drag-preview resizer-drag-preview", style: style },
        React.createElement(WidthResizer, { status: "active" })));
}
export function getSizeAndXCoords(item, initialSourceClientOffsetX, differenceFromInitialOffsetX, scrollCorrectionX) {
    var minLimit = item.minLimit, maxLimit = item.maxLimit, currentWidth = item.currentWidth, initialLayoutDimensions = item.initialLayoutDimensions, gridColumnWidth = item.gridColumnWidth;
    var deltaSize = getDiffInGridColumns(differenceFromInitialOffsetX - scrollCorrectionX, gridColumnWidth);
    var sizeLimitation = applySizeLimitation(minLimit, maxLimit, currentWidth, deltaSize);
    var deltaSizeLimited = sizeLimitation.limitedSize - currentWidth;
    var deltaXLimited = deltaSizeLimited * gridColumnWidth;
    var deltaXUnlimited = deltaSize * gridColumnWidth;
    var initialIndex = Math.round((initialSourceClientOffsetX - initialLayoutDimensions.left) / gridColumnWidth);
    var currentIndex = initialIndex + deltaSizeLimited;
    return __assign(__assign({}, sizeLimitation), { limitedX: initialSourceClientOffsetX + deltaXLimited, unlimitedX: initialSourceClientOffsetX + deltaXUnlimited, initialIndex: initialIndex,
        currentIndex: currentIndex });
}
export function getDiffInGridColumns(pxDiffX, gridColumnWidth) {
    return Math.round(pxDiffX / gridColumnWidth);
}
function getWidthResizerStyle(_a) {
    var initialOffset = _a.initialOffset, limitedX = _a.limitedX, gridColumnHeightInPx = _a.gridColumnHeightInPx, dragLayerOffset = _a.dragLayerOffset, scrollCorrection = _a.scrollCorrection;
    return {
        position: "absolute",
        top: initialOffset.y - dragLayerOffset.y + scrollCorrection.y + "px",
        left: limitedX - dragLayerOffset.x + scrollCorrection.x + "px",
        height: gridColumnHeightInPx + "px",
    };
}
//# sourceMappingURL=WidthResizerDragPreview.js.map