// (C) 2022 GoodData Corporation
import React, { useEffect } from "react";
import { FormattedMessage } from "react-intl";
import cx from "classnames";
import { widgetRef } from "@gooddata/sdk-model";
import { Typography } from "@gooddata/sdk-ui-kit";
import { AttributeFilterConfiguration } from "../../common";
import { KpiComparison } from "./KpiComparison/KpiComparison";
import { KpiWidgetDateDatasetFilter } from "./KpiWidgetDateDatasetFilter";
import { KpiMetricDropdown } from "./KpiMetricDropdown/KpiMetricDropdown";
import { KpiConfigurationPanelHeader } from "./KpiConfigurationPanelHeader";
import { KpiConfigurationMessages } from "./KpiConfigurationMessages";
import { KpiDrillConfiguration } from "./KpiDrill/KpiDrillConfiguration";
import { safeSerializeObjRef } from "../../../../_staging/metadata/safeSerializeObjRef";
import { queryWidgetAlertCount, useDashboardQueryProcessing } from "../../../../model";
export var KpiConfigurationPanelCore = function (props) {
    var widget = props.widget, onMeasureChange = props.onMeasureChange, onClose = props.onClose;
    var ref = widget && widgetRef(widget);
    var metric = widget === null || widget === void 0 ? void 0 : widget.kpi.metric;
    var _a = useDashboardQueryProcessing({
        queryCreator: queryWidgetAlertCount,
    }), runAlertNumberQuery = _a.run, numberOfAlerts = _a.result, status = _a.status;
    useEffect(function () {
        if (ref) {
            runAlertNumberQuery(ref);
        }
    }, [safeSerializeObjRef(ref)]);
    var isNumOfAlertsLoaded = status === "success";
    var configurationCategoryClasses = cx("configuration-category", {
        "s-widget-alerts-information-loaded": isNumOfAlertsLoaded,
    });
    var sectionHeaderClasses = cx({ "is-disabled": !metric });
    return (React.createElement(React.Fragment, null,
        React.createElement(KpiConfigurationPanelHeader, { onCloseButtonClick: onClose }),
        React.createElement("div", { className: "configuration-panel" },
            React.createElement("div", { className: configurationCategoryClasses },
                React.createElement(KpiConfigurationMessages, { numberOfAlerts: numberOfAlerts }),
                React.createElement(Typography, { tagName: "h3" },
                    React.createElement(FormattedMessage, { id: "configurationPanel.measure" })),
                React.createElement(KpiMetricDropdown, { widget: widget, onMeasureChange: onMeasureChange }),
                React.createElement(Typography, { tagName: "h3", className: sectionHeaderClasses },
                    React.createElement(FormattedMessage, { id: "configurationPanel.filterBy" })),
                !!widget && (React.createElement(React.Fragment, null,
                    React.createElement(KpiWidgetDateDatasetFilter, { widget: widget }),
                    React.createElement(AttributeFilterConfiguration, { widget: widget }))),
                React.createElement(Typography, { tagName: "h3", className: sectionHeaderClasses },
                    React.createElement(FormattedMessage, { id: "configurationPanel.comparison" })),
                !!widget && React.createElement(KpiComparison, { widget: widget }),
                React.createElement(Typography, { tagName: "h3", className: sectionHeaderClasses },
                    React.createElement(FormattedMessage, { id: "configurationPanel.drillIntoDashboard" })),
                !!widget && React.createElement(KpiDrillConfiguration, { widget: widget })))));
};
//# sourceMappingURL=KpiConfigurationPanelCore.js.map