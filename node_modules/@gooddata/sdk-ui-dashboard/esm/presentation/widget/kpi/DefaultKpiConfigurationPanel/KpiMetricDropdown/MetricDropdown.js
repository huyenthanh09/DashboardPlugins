import { __read } from "tslib";
// (C) 2007-2022 GoodData Corporation
import React, { useCallback, useMemo, useRef, useState } from "react";
import { useIntl } from "react-intl";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import { Dropdown, DropdownButton, DropdownList } from "@gooddata/sdk-ui-kit";
import cx from "classnames";
import debounce from "lodash/debounce";
import { useDashboardSelector, selectCatalogMeasures, selectEnableRenamingMeasureToMetric, } from "../../../../../model";
import { CONFIG_PANEL_INNER_WIDTH } from "../constants";
import { MetricDropdownItem } from "./MetricDropdownItem";
var alignPoints = [{ align: "bl tl" }];
var LIST_EXTRAS = 58; // search field + top/bottom borders
var LIST_ITEM_HEIGHT = 28;
var MAX_LIST_HEIGHT = 294;
export var MetricDropdown = function (props) {
    var _a, _b;
    var onSelect = props.onSelect, bodyClassName = props.bodyClassName, selectedItems = props.selectedItems, openOnInit = props.openOnInit;
    var intl = useIntl();
    var buttonRef = useRef(null);
    var _c = __read(useState(""), 2), searchQuery = _c[0], setSearchQuery = _c[1];
    var measures = useDashboardSelector(selectCatalogMeasures);
    var shouldRenameMeasureToMetric = useDashboardSelector(selectEnableRenamingMeasureToMetric);
    var debouncedOnSearch = useRef(debounce(function (newSearchQuery) {
        setSearchQuery(newSearchQuery);
    }, 250));
    var _d = __read(selectedItems, 1), selectedRef = _d[0];
    var selectedItem = selectedRef
        ? measures.find(function (m) { return areObjRefsEqual(m.measure.ref, selectedItems[0]); })
        : undefined;
    var buttonValue = (_b = (_a = selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.measure) === null || _a === void 0 ? void 0 : _a.title) !== null && _b !== void 0 ? _b : intl.formatMessage({ id: "configurationPanel.selectMeasurePlaceholder" });
    var onOpenStateChanged = useCallback(function (isOpen) {
        if (isOpen && searchQuery) {
            setSearchQuery("");
        }
    }, [searchQuery]);
    var filteredMeasures = useMemo(function () {
        return searchQuery
            ? measures.filter(function (m) { return m.measure.title.toLowerCase().includes(searchQuery.toLowerCase()); })
            : measures;
    }, [measures, searchQuery]);
    var calculateHeight = function (itemsCount) {
        var winHeight = window.innerHeight;
        var dropdownButtonBottom = buttonRef.current ? buttonRef.current.getBoundingClientRect().bottom : 0;
        var minHeight = Math.min(winHeight - dropdownButtonBottom - LIST_EXTRAS, MAX_LIST_HEIGHT, LIST_ITEM_HEIGHT * itemsCount);
        return Math.max(LIST_ITEM_HEIGHT, minHeight);
    };
    var height = calculateHeight(filteredMeasures.length) || MAX_LIST_HEIGHT;
    return (React.createElement(Dropdown, { alignPoints: alignPoints, className: "s-metric_select", closeOnMouseDrag: true, openOnInit: openOnInit, ignoreClicksOnByClass: [".dash-content"], onOpenStateChanged: onOpenStateChanged, renderButton: function (_a) {
            var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
            return (React.createElement("div", { ref: buttonRef },
                React.createElement(DropdownButton, { className: shouldRenameMeasureToMetric ? "type-metric" : "type-measure", isSmall: true, value: buttonValue, isOpen: isOpen, onClick: toggleDropdown })));
        }, renderBody: function (_a) {
            var closeDropdown = _a.closeDropdown;
            return (React.createElement("div", { className: cx(bodyClassName, "metrics-dropdown") },
                React.createElement(DropdownList, { items: filteredMeasures, searchFieldSize: "small", showSearch: true, onSearch: debouncedOnSearch.current, searchString: searchQuery, height: height, width: CONFIG_PANEL_INNER_WIDTH, 
                    // disabling autofocus for now as it causes the page to scroll to top for no reason
                    disableAutofocus: true, renderItem: function (_a) {
                        var item = _a.item;
                        return (React.createElement(MetricDropdownItem, { item: item.measure, isSelected: !!selectedRef && areObjRefsEqual(selectedRef, item.measure.ref), unlistedTitle: intl.formatMessage({
                                id: "configurationPanel.unlistedMetric",
                            }), unlistedIconTitle: intl.formatMessage({
                                id: "configurationPanel.unlistedMetricIconTitle",
                            }), onClick: function () {
                                onSelect(item.measure);
                                closeDropdown();
                            } }));
                    } })));
        } }));
};
//# sourceMappingURL=MetricDropdown.js.map