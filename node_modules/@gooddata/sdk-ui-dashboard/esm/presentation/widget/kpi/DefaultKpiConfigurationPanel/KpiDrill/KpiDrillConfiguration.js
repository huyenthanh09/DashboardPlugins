import { __assign, __read, __spread } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useCallback, useMemo } from "react";
import { useIntl } from "react-intl";
import cx from "classnames";
import flatMap from "lodash/flatMap";
import sortBy from "lodash/sortBy";
import { Button, Dropdown, DropdownButton, DropdownList, NoData, SingleSelectListItem, } from "@gooddata/sdk-ui-kit";
import { widgetRef } from "@gooddata/sdk-model";
import { removeDrillForKpiWidget, selectLegacyDashboards, selectShouldHidePixelPerfectExperience, setDrillForKpiWidget, useDashboardDispatch, useDashboardSelector, } from "../../../../../model";
import { CONFIG_PANEL_INNER_WIDTH } from "../constants";
var alignPoints = [{ align: "bl tl" }, { align: "tl bl" }];
var CONFIG_PANEL_DRILL_WIDTH = CONFIG_PANEL_INNER_WIDTH - 23;
var DrillToDropdownButton = function (props) {
    var _a = props.isDisabled, isDisabled = _a === void 0 ? false : _a, _b = props.isOpen, isOpen = _b === void 0 ? false : _b, _c = props.value, value = _c === void 0 ? "" : _c, selection = props.selection, _d = props.title, title = _d === void 0 ? "" : _d, onClick = props.onClick;
    var button;
    if (selection) {
        button = React.createElement(DropdownButton, { title: title, value: value, onClick: onClick, isOpen: isOpen });
    }
    else {
        var buttonClasses = cx("gd-button-secondary", "gd-button-small", "gd-icon-add", {
            "is-focus": isOpen,
        });
        button = (React.createElement(Button, { onClick: onClick, title: title, className: buttonClasses, value: value, disabled: isDisabled }));
    }
    return React.createElement("div", { className: "s-drill_to_select" }, button);
};
var KpiDrillConfigurationCore = function (props) {
    var _a, _b;
    var widget = props.widget;
    var intl = useIntl();
    var dispatch = useDashboardDispatch();
    var onDrillToSelect = useCallback(function (item) {
        dispatch(setDrillForKpiWidget(widgetRef(widget), item.dashboardRef, item.identifier));
    }, [dispatch, widget]);
    var onDrillToRemove = useCallback(function () {
        dispatch(removeDrillForKpiWidget(widgetRef(widget)));
    }, [dispatch, widget]);
    var dashboards = useDashboardSelector(selectLegacyDashboards);
    var drillToItem = (_b = (_a = widget.drills) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.tab;
    var UNLISTED_DASHBOARD_TAB = {
        title: intl.formatMessage({ id: "configurationPanel.unlistedDashboardTab" }),
    };
    var drillToItems = useMemo(function () {
        if (!dashboards) {
            return [];
        }
        var sortedDashboards = sortBy(dashboards, function (dashboard) { return dashboard.title; });
        return flatMap(sortedDashboards, function (dash) {
            return __spread([
                {
                    title: dash.title,
                    identifier: dash.identifier,
                    dashboardRef: dash.ref,
                    type: "header",
                }
            ], dash.tabs.map(function (tab) {
                return {
                    title: tab.title,
                    identifier: tab.identifier,
                    dashboardRef: dash.ref,
                    type: undefined,
                };
            }));
        });
    }, [dashboards]);
    var foundDrillToItem = drillToItems === null || drillToItems === void 0 ? void 0 : drillToItems.find(function (item) { return item.identifier === drillToItem; });
    var selectedDrillToItem = drillToItem ? foundDrillToItem || UNLISTED_DASHBOARD_TAB : null;
    var buttonValue = selectedDrillToItem
        ? selectedDrillToItem.title
        : intl.formatMessage({ id: "configurationPanel.selectDashboard" });
    return (React.createElement("div", { className: "drill-to-dropdown-container" },
        React.createElement(Dropdown, { className: "drill-to-dropdown s-drill-to-dropdown", closeOnParentScroll: true, closeOnMouseDrag: true, alignPoints: alignPoints, renderButton: function (_a) {
                var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
                return (React.createElement(DrillToDropdownButton, { title: buttonValue, value: buttonValue, selection: selectedDrillToItem, isOpen: isOpen, onClick: toggleDropdown }));
            }, renderBody: function (_a) {
                var closeDropdown = _a.closeDropdown;
                return (React.createElement(DropdownList, { isLoading: !dashboards, renderNoData: function (_a) {
                        var hasNoMatchingData = _a.hasNoMatchingData;
                        return (React.createElement(NoData, { hasNoMatchingData: hasNoMatchingData, noDataLabel: intl.formatMessage({
                                id: "configurationPanel.noLinkableDashboards",
                            }) }));
                    }, className: "configuration-dropdown s-drill-to-list", width: CONFIG_PANEL_DRILL_WIDTH, items: drillToItems, renderItem: function (_a) {
                        var item = _a.item;
                        var selected = selectedDrillToItem && selectedDrillToItem.title === item.title;
                        return (React.createElement(SingleSelectListItem, { title: item.title, isSelected: !!selected, type: item.type, onClick: function () {
                                onDrillToSelect(item);
                                closeDropdown();
                            } }));
                    } }));
            } }),
        drillToItem ? (React.createElement(Button, { className: "gd-button-link-dimmed gd-button-icon-only gd-icon-cross button-remove-drill-to s-button-remove-drill-to", onClick: onDrillToRemove })) : null));
};
export var KpiDrillConfiguration = function (props) {
    var isHidden = useDashboardSelector(selectShouldHidePixelPerfectExperience);
    if (isHidden) {
        return null;
    }
    return React.createElement(KpiDrillConfigurationCore, __assign({}, props));
};
//# sourceMappingURL=KpiDrillConfiguration.js.map