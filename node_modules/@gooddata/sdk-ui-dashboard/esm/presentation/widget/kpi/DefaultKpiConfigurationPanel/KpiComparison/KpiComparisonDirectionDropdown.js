// (C) 2022 GoodData Corporation
import React from "react";
import { defineMessage, FormattedMessage, useIntl } from "react-intl";
import { Dropdown, DropdownButton, DropdownList, SingleSelectListItem, } from "@gooddata/sdk-ui-kit";
import { CONFIG_PANEL_INNER_WIDTH } from "../constants";
var alignPoints = [{ align: "bl tl" }, { align: "tl bl" }];
var messages = {
    growIsBad: defineMessage({ id: "configurationPanel.comparisonDirectionItems.red" }),
    growIsGood: defineMessage({ id: "configurationPanel.comparisonDirectionItems.green" }),
};
var placeholderMessage = defineMessage({ id: "configurationPanel.selectComparisonDirectionPlaceholder" });
var directionOrder = ["growIsGood", "growIsBad"];
export var KpiComparisonDirectionDropdown = function (props) {
    var comparisonDirection = props.comparisonDirection, onComparisonDirectionChanged = props.onComparisonDirectionChanged;
    var intl = useIntl();
    var buttonValue = comparisonDirection
        ? intl.formatMessage(messages[comparisonDirection])
        : intl.formatMessage(placeholderMessage);
    return (React.createElement("div", null,
        React.createElement(FormattedMessage, { id: "configurationPanel.increasingNumberIs", tagName: "label" }),
        React.createElement(Dropdown, { alignPoints: alignPoints, className: "s-growing_number_is", renderButton: function (_a) {
                var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
                return (React.createElement(DropdownButton, { title: buttonValue, value: buttonValue, className: comparisonDirection ? "type-" + comparisonDirection : "", isOpen: isOpen, onClick: toggleDropdown }));
            }, closeOnParentScroll: true, closeOnMouseDrag: true, renderBody: function (_a) {
                var closeDropdown = _a.closeDropdown;
                return (React.createElement(DropdownList, { className: "configuration-dropdown growing-number-is-list", width: CONFIG_PANEL_INNER_WIDTH, items: directionOrder, renderItem: function (_a) {
                        var item = _a.item;
                        var selected = comparisonDirection === item;
                        return (React.createElement(SingleSelectListItem, { title: intl.formatMessage(messages[item]), isSelected: selected, onClick: function () {
                                onComparisonDirectionChanged(item);
                                closeDropdown();
                            } }));
                    } }));
            } })));
};
//# sourceMappingURL=KpiComparisonDirectionDropdown.js.map