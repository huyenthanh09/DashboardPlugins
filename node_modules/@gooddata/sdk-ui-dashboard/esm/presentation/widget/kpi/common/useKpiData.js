// (C) 2020-2022 GoodData Corporation
import { isAllTimeDateFilter, isDateFilter, newMeasure, newPopMeasure, newPreviousPeriodMeasure, } from "@gooddata/sdk-model";
import { UnexpectedSdkError } from "@gooddata/sdk-ui";
import invariant from "ts-invariant";
import { filterContextItemsToDashboardFiltersByWidget } from "../../../../converters";
import { selectAllCatalogDateDatasetsMap, useDashboardSelector } from "../../../../model";
import { useWidgetFilters } from "../../common";
/**
 * @internal
 */
export function useKpiData(_a) {
    var kpiWidget = _a.kpiWidget, dashboardFilters = _a.dashboardFilters;
    var _b = useWidgetFilters(kpiWidget), status = _b.status, result = _b.result, error = _b.error;
    // we only put IDashboardFilters in, so we must get IDashboardFilters out as well
    var effectiveFilters = result;
    var dateDatasetsMap = useDashboardSelector(selectAllCatalogDateDatasetsMap);
    if (!kpiWidget || status === "pending") {
        return {
            status: "pending",
            error: undefined,
            result: undefined,
        };
    }
    if (status === "error") {
        return {
            status: "error",
            error: error,
            result: undefined,
        };
    }
    if (status === "rejected") {
        return {
            status: "error",
            error: new UnexpectedSdkError("Getting filter settings for a KPI widget failed."),
            result: undefined,
        };
    }
    if (status === "running") {
        return {
            status: "loading",
            error: undefined,
            result: undefined,
        };
    }
    var allFilters = filterContextItemsToDashboardFiltersByWidget(dashboardFilters, kpiWidget);
    var primaryMeasure = newMeasure(kpiWidget.kpi.metric);
    var secondaryMeasure = getSecondaryMeasure(kpiWidget, primaryMeasure, effectiveFilters, dateDatasetsMap);
    return {
        status: "success",
        error: undefined,
        result: { primaryMeasure: primaryMeasure, secondaryMeasure: secondaryMeasure, effectiveFilters: effectiveFilters, allFilters: allFilters },
    };
}
function getSecondaryMeasure(kpiWidget, primaryMeasure, effectiveFilters, dateDatasetsMap) {
    var comparison = kpiWidget.kpi.comparisonType;
    var isAllTime = !effectiveFilters ||
        !effectiveFilters.some(function (filter) { return isDateFilter(filter) && !isAllTimeDateFilter(filter); });
    if (comparison === "none" || isAllTime || !kpiWidget.dateDataSet) {
        return undefined;
    }
    if (comparison === "previousPeriod") {
        return newPreviousPeriodMeasure(primaryMeasure, [{ dataSet: kpiWidget.dateDataSet, periodsAgo: 1 }]);
    }
    if (comparison === "lastYear") {
        var relevantDateDataset = dateDatasetsMap.get(kpiWidget.dateDataSet);
        invariant(relevantDateDataset, "Cannot find relevant date dataset in useKpiData");
        var yearAttribute = relevantDateDataset.dateAttributes.find(function (dateAttribute) { return dateAttribute.granularity === "GDC.time.year"; });
        invariant(yearAttribute, "Cannot find yearAttribute in useKpiData");
        return newPopMeasure(primaryMeasure, yearAttribute.attribute.ref);
    }
    invariant(false, "Unknown comparison " + comparison);
}
//# sourceMappingURL=useKpiData.js.map