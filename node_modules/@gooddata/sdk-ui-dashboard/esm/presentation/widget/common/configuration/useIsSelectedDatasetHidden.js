import { __awaiter, __generator } from "tslib";
// (C) 2022 GoodData Corporation
import { useMemo } from "react";
import { areObjRefsEqual, idRef } from "@gooddata/sdk-model";
import { useDashboardSelector, selectObjectAvailabilityConfig, selectCatalogDateDatasets, } from "../../../../model";
import { useBackendStrict, useCancelablePromise, useWorkspaceStrict } from "@gooddata/sdk-ui";
import { safeSerializeObjRef } from "../../../../_staging/metadata/safeSerializeObjRef";
export function useIsSelectedDatasetHidden(selectedDateDatasetRef) {
    var _this = this;
    var _a, _b;
    var backend = useBackendStrict();
    var workspace = useWorkspaceStrict();
    var allDateDatasets = useDashboardSelector(selectCatalogDateDatasets);
    var objectAvailability = useDashboardSelector(selectObjectAvailabilityConfig);
    var hasObjectAvailability = !!(((_a = objectAvailability.excludeObjectsWithTags) === null || _a === void 0 ? void 0 : _a.length) || ((_b = objectAvailability.includeObjectsWithTags) === null || _b === void 0 ? void 0 : _b.length));
    var _c = useCancelablePromise({
        promise: hasObjectAvailability
            ? function () { return __awaiter(_this, void 0, void 0, function () {
                var catalog;
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, backend
                                .workspace(workspace)
                                .catalog()
                                .withGroups(false)
                                .forTypes(["dateDataset"])
                                .excludeTags(((_a = objectAvailability.excludeObjectsWithTags) !== null && _a !== void 0 ? _a : []).map(function (tag) { return idRef(tag); }))
                                .includeTags(((_b = objectAvailability.includeObjectsWithTags) !== null && _b !== void 0 ? _b : []).map(function (tag) { return idRef(tag); }))
                                .load()];
                        case 1:
                            catalog = _c.sent();
                            return [2 /*return*/, catalog.dateDatasets()];
                    }
                });
            }); }
            : function () { return Promise.resolve(allDateDatasets); },
    }, [backend, workspace, objectAvailability]), visibleDateDatasets = _c.result, status = _c.status;
    var selectedDateDatasetHiddenByObjectAvailability = useMemo(function () {
        if (!visibleDateDatasets) {
            return false;
        }
        return !visibleDateDatasets.some(function (ds) { return areObjRefsEqual(selectedDateDatasetRef, ds.dataSet.ref); });
    }, [safeSerializeObjRef(selectedDateDatasetRef), visibleDateDatasets]);
    return {
        selectedDateDatasetHiddenByObjectAvailability: selectedDateDatasetHiddenByObjectAvailability,
        status: status,
    };
}
//# sourceMappingURL=useIsSelectedDatasetHidden.js.map