// (C) 2007-2022 GoodData Corporation
import React from "react";
import { objRefToString } from "@gooddata/sdk-model";
import { defineMessages, useIntl } from "react-intl";
import cx from "classnames";
import { Dropdown, DropdownButton, DropdownList, sortDateDatasets, isDateDatasetHeader, ShortenedText, } from "@gooddata/sdk-ui-kit";
import { stringUtils } from "@gooddata/util";
var DEFAULT_HYPHEN_CHAR = "-";
var alignPoints = [{ align: "bl tl" }, { align: "tl bl" }];
var tooltipAlignPoints = [
    { align: "cl cr", offset: { x: -10, y: 0 } },
    { align: "cr cl", offset: { x: 10, y: 0 } },
];
// work around the evil DateDatasetsListItem from kit that magically translates SOME of the items' titles
// this way the i18n actually has a chance to detect these
var dateDatasetHeaderMessages = defineMessages({
    "gs.date.date-dataset.recommended": { id: "gs.date.date-dataset.recommended" },
    "gs.date.date-dataset.other": { id: "gs.date.date-dataset.other" },
    "gs.date.date-dataset.related": { id: "gs.date.date-dataset.related" },
    "gs.date.date-dataset.unrelated": { id: "gs.date.date-dataset.unrelated" },
});
var DateDatasetsListItem = function (_a) {
    var id = _a.id, _b = _a.title, title = _b === void 0 ? "" : _b, isHeader = _a.isHeader, isSelected = _a.isSelected, isUnrelated = _a.isUnrelated, onClick = _a.onClick;
    if (isHeader) {
        return React.createElement("div", { className: "gd-list-item gd-list-item-header" }, title);
    }
    var classNames = cx("gd-list-item", "gd-list-item-shortened", "s-" + id, "s-" + stringUtils.simplifyText(title), {
        "is-selected": isSelected,
        "is-unrelated": isUnrelated,
    });
    return (React.createElement("div", { className: classNames, onClick: onClick },
        React.createElement(ShortenedText, { tooltipAlignPoints: tooltipAlignPoints }, title)));
};
function catalogDateDatasetToDateDataset(ds) {
    return {
        id: ds.dataSet.id,
        title: ds.dataSet.title,
        relevance: ds.relevance,
    };
}
function removeDateFromTitle(title) {
    return title.trim().replace(/^Date \((.*)\)$/, "$1");
}
export var DateDatasetDropdown = function (props) {
    var _a = props.className, className = _a === void 0 ? "s-date-dataset-switch" : _a, _b = props.isLoading, isLoading = _b === void 0 ? false : _b, _c = props.autoOpen, autoOpen = _c === void 0 ? false : _c, onDateDatasetChange = props.onDateDatasetChange, activeDateDataset = props.activeDateDataset, unrelatedDateDataset = props.unrelatedDateDataset, width = props.width, dateFromVisualization = props.dateFromVisualization, relatedDateDatasets = props.relatedDateDatasets, widgetRef = props.widgetRef;
    var intl = useIntl();
    var unrelatedDateDataSetId = unrelatedDateDataset ? unrelatedDateDataset.dataSet.id : null;
    var activeDateDataSetId;
    var activeDateDataSetTitle = DEFAULT_HYPHEN_CHAR;
    var activeDateDataSetUri;
    var recommendedDateDataSet = null;
    if (!isLoading && activeDateDataset) {
        activeDateDataSetId = activeDateDataset.dataSet.id;
        activeDateDataSetTitle = activeDateDataset.dataSet.title;
        activeDateDataSetUri = activeDateDataset.dataSet.uri;
    }
    if (dateFromVisualization) {
        recommendedDateDataSet = relatedDateDatasets.find(function (d) { return d.dataSet.uri === dateFromVisualization.dataSet.uri; });
    }
    var sortedItems = sortDateDatasets(relatedDateDatasets.map(catalogDateDatasetToDateDataset), recommendedDateDataSet ? catalogDateDatasetToDateDataset(recommendedDateDataSet) : undefined, unrelatedDateDataset ? catalogDateDatasetToDateDataset(unrelatedDateDataset) : undefined);
    return (React.createElement(Dropdown
    // We want to open the dropdown, when user selects a metric
    // without a recommended data set
    , { 
        // We want to open the dropdown, when user selects a metric
        // without a recommended data set
        key: objRefToString(widgetRef) + "_" + autoOpen, openOnInit: autoOpen, ignoreClicksOnByClass: [".dash-content"], renderButton: function (_a) {
            var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
            var buttonClassName = cx("s-date-dataset-button", isOpen ? "s-expanded" : "s-collapsed", {
                "is-loading": isLoading,
                "is-unrelated": !isLoading &&
                    unrelatedDateDataset &&
                    unrelatedDateDataset.dataSet.uri === activeDateDataSetUri,
            });
            var buttonValue = isLoading
                ? intl.formatMessage({ id: "loading" })
                : removeDateFromTitle(activeDateDataSetTitle);
            return (React.createElement(DropdownButton, { className: buttonClassName, value: buttonValue, isOpen: isOpen, onClick: toggleDropdown, disabled: isLoading }));
        }, className: className, closeOnParentScroll: true, closeOnMouseDrag: true, alignPoints: alignPoints, renderBody: function (_a) {
            var closeDropdown = _a.closeDropdown;
            if (isLoading) {
                return null;
            }
            return (React.createElement(DropdownList, { className: "configuration-dropdown dataSets-list", width: width, items: sortedItems, itemsCount: sortedItems.length, renderItem: function (_a) {
                    var item = _a.item;
                    var isHeader = isDateDatasetHeader(item);
                    var isSelected = !isDateDatasetHeader(item) && activeDateDataSetId === item.id;
                    var isUnrelated = !isDateDatasetHeader(item) && unrelatedDateDataSetId === item.id;
                    return (React.createElement(DateDatasetsListItem, { title: isHeader
                            ? intl.formatMessage(dateDatasetHeaderMessages[item.title])
                            : removeDateFromTitle(item.title), isHeader: isHeader, isSelected: isSelected, isUnrelated: isUnrelated, onClick: function (e) {
                            e.preventDefault();
                            if (isDateDatasetHeader(item)) {
                                return;
                            }
                            closeDropdown();
                            onDateDatasetChange(item.id);
                        } }));
                } }));
        } }));
};
//# sourceMappingURL=DateDatasetDropdown.js.map