import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useState } from "react";
import { FormattedMessage } from "react-intl";
import cx from "classnames";
import { stringUtils } from "@gooddata/util";
import { ShortenedText } from "@gooddata/sdk-ui-kit";
import { areObjRefsEqual, isDashboardAttributeFilterReference, isInsightWidget, objRefToString, } from "@gooddata/sdk-model";
import { selectAttributeFilterDisplayFormsMap, useDashboardSelector } from "../../../../model";
import { useAttributeFilterConfigurationHandling } from "./useAttributeFilterConfigurationHandling";
var tooltipAlignPoints = [{ align: "cl cr", offset: { x: -20, y: 0 } }];
export var AttributeFilterConfigurationItem = function (props) {
    var widget = props.widget, displayFormRef = props.displayFormRef, title = props.title;
    var dfMap = useDashboardSelector(selectAttributeFilterDisplayFormsMap);
    var _a = __read(useState(function () {
        return !widget.ignoreDashboardFilters.some(function (reference) {
            if (!isDashboardAttributeFilterReference(reference)) {
                return false;
            }
            var df = dfMap.get(reference.displayForm);
            return areObjRefsEqual(df === null || df === void 0 ? void 0 : df.ref, displayFormRef);
        });
    }), 2), isApplied = _a[0], setIsApplied = _a[1];
    var _b = useAttributeFilterConfigurationHandling(widget, displayFormRef, setIsApplied), handleIgnoreChanged = _b.handleIgnoreChanged, status = _b.status;
    var isError = status === "error";
    var isLoading = status === "loading";
    var classNames = cx("s-attribute-filter-by-item", "s-" + stringUtils.simplifyText(title), "input-checkbox-label", "filter-by-item", "attribute-filter-by-item", {
        "attribute-filter-error": isError,
    });
    var uniqueKey = objRefToString(displayFormRef);
    return (React.createElement("div", null,
        React.createElement("label", { className: classNames, htmlFor: uniqueKey },
            React.createElement("input", { id: uniqueKey, type: "checkbox", className: "input-checkbox", checked: isApplied, onChange: function (e) { return handleIgnoreChanged(e.target.checked); } }),
            React.createElement("span", { className: "input-label-text" },
                React.createElement(ShortenedText, { tooltipAlignPoints: tooltipAlignPoints, tagName: "span", className: "title" }, title)),
            isLoading && React.createElement("div", { className: "gd-spinner small" })),
        !!isError && (React.createElement("div", { className: "gd-message error s-not-applied-attribute-filter" }, isInsightWidget(widget) ? (React.createElement(FormattedMessage, { id: "configurationPanel.vizCantBeFilteredByAttribute", values: { attributeName: title } })) : (React.createElement(FormattedMessage, { id: "configurationPanel.kpiCantBeFilteredByAttribute", values: { attributeName: title } }))))));
};
//# sourceMappingURL=AttributeFilterConfigurationItem.js.map