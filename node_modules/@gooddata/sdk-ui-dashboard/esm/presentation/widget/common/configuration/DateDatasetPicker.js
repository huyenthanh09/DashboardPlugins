// (C) 2007-2022 GoodData Corporation
import React from "react";
import { isInsightWidget } from "@gooddata/sdk-model";
import { FormattedMessage } from "react-intl";
import Measure from "react-measure";
import { DateDatasetDropdown } from "./DateDatasetDropdown";
import { getUnrelatedDateDataset } from "./utils";
export var DateDatasetPicker = function (props) {
    var relatedDateDatasets = props.relatedDateDatasets, selectedDateDataset = props.selectedDateDataset, selectedDateDatasetHidden = props.selectedDateDatasetHidden, widget = props.widget, dateFromVisualization = props.dateFromVisualization, autoOpen = props.autoOpen, isLoading = props.isLoading, width = props.width, onDateDatasetChange = props.onDateDatasetChange;
    var unrelatedDateDataset = relatedDateDatasets &&
        getUnrelatedDateDataset(relatedDateDatasets, selectedDateDataset, selectedDateDatasetHidden);
    var getDateFilter = function (measureRef, width) { return (React.createElement("div", { className: "subcategory-dropdown", ref: measureRef },
        React.createElement(DateDatasetDropdown, { autoOpen: autoOpen, widgetRef: widget.ref, className: "s-filter-date-dropdown", relatedDateDatasets: relatedDateDatasets !== null && relatedDateDatasets !== void 0 ? relatedDateDatasets : [], activeDateDataset: selectedDateDatasetHidden ? undefined : selectedDateDataset, unrelatedDateDataset: unrelatedDateDataset, dateFromVisualization: dateFromVisualization, onDateDatasetChange: onDateDatasetChange, isLoading: isLoading, width: width }))); };
    return (React.createElement("div", null,
        React.createElement("div", { className: "configuration-subcategory" },
            React.createElement("label", { className: "s-filter-date-dropdown-heading subcategory-label", htmlFor: "s-filter-date-dropdown" },
                React.createElement(FormattedMessage, { id: "configurationPanel.dateAs" })),
            width ? (getDateFilter(undefined, width)) : (React.createElement(Measure, null, function (_a) {
                var measureRef = _a.measureRef, contentRect = _a.contentRect;
                return getDateFilter(measureRef, contentRect.entry.width || 0);
            }))),
        !!(unrelatedDateDataset && !isLoading) && (React.createElement("div", { className: "gd-message error s-unrelated-date" }, isInsightWidget(widget) ? (React.createElement(FormattedMessage, { id: "configurationPanel.unrelatedVizDateInfo", values: { dateDataSet: unrelatedDateDataset.dataSet.title } })) : (React.createElement(FormattedMessage, { id: "configurationPanel.unrelatedKpiDateInfo", values: { dateDataSet: unrelatedDateDataset.dataSet.title } }))))));
};
//# sourceMappingURL=DateDatasetPicker.js.map