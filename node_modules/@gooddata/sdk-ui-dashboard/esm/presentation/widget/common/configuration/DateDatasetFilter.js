import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useCallback, useState } from "react";
import { DateFilterCheckbox } from "./DateFilterCheckbox";
import { useDashboardSelector, selectAllCatalogDateDatasetsMap } from "../../../../model";
import { DateDatasetPicker } from "./DateDatasetPicker";
import { getUnrelatedDateDataset } from "./utils";
import { useDateFilterConfigurationHandling } from "./useDateFilterConfigurationHandling";
import { useIsSelectedDatasetHidden } from "./useIsSelectedDatasetHidden";
var CONFIG_PANEL_DATE_FILTER_WIDTH = 159;
export var DateDatasetFilter = function (props) {
    var relatedDateDatasets = props.relatedDateDatasets, widget = props.widget, dateFilterCheckboxDisabled = props.dateFilterCheckboxDisabled, dateFromVisualization = props.dateFromVisualization, isDatasetsLoading = props.isDatasetsLoading, shouldPickDateDataset = props.shouldPickDateDataset, onDateDatasetChanged = props.onDateDatasetChanged, isLoadingAdditionalData = props.isLoadingAdditionalData;
    var catalogDatasetsMap = useDashboardSelector(selectAllCatalogDateDatasetsMap);
    var selectedDateDataset = widget.dateDataSet && catalogDatasetsMap.get(widget.dateDataSet);
    var _a = useIsSelectedDatasetHidden(selectedDateDataset === null || selectedDateDataset === void 0 ? void 0 : selectedDateDataset.dataSet.ref), selectedDateDatasetHiddenByObjectAvailability = _a.selectedDateDatasetHiddenByObjectAvailability, visibleDateDatasetsStatus = _a.status;
    var _b = __read(useState(!!widget.dateDataSet || shouldPickDateDataset || isLoadingAdditionalData), 2), isDateFilterEnabled = _b[0], setIsDateFilterEnabled = _b[1];
    var _c = useDateFilterConfigurationHandling(widget, relatedDateDatasets, setIsDateFilterEnabled), handleDateDatasetChangedCore = _c.handleDateDatasetChanged, handleDateFilterEnabled = _c.handleDateFilterEnabled, status = _c.status;
    var handleDateDatasetChanged = useCallback(function (id) {
        onDateDatasetChanged === null || onDateDatasetChanged === void 0 ? void 0 : onDateDatasetChanged(id);
        handleDateDatasetChangedCore(id);
    }, [handleDateDatasetChangedCore, onDateDatasetChanged]);
    var isFilterLoading = status === "loading";
    var isDropdownLoading = isDatasetsLoading || visibleDateDatasetsStatus === "loading";
    var shouldRenderDateDataSetsDropdown = !dateFilterCheckboxDisabled &&
        !(!isDateFilterEnabled || isFilterLoading) &&
        ((relatedDateDatasets === null || relatedDateDatasets === void 0 ? void 0 : relatedDateDatasets.length) || isDropdownLoading || selectedDateDatasetHiddenByObjectAvailability);
    var unrelatedDateDataset = relatedDateDatasets &&
        getUnrelatedDateDataset(relatedDateDatasets, selectedDateDataset, selectedDateDatasetHiddenByObjectAvailability);
    return (React.createElement("div", null,
        React.createElement(DateFilterCheckbox, { relatedDateDatasets: relatedDateDatasets, widget: widget, dateFilterCheckboxDisabled: dateFilterCheckboxDisabled, dateFilterEnabled: isDateFilterEnabled, isDropdownLoading: isDropdownLoading, isFilterLoading: isFilterLoading, selectedDateDataset: selectedDateDataset, selectedDateDatasetHidden: selectedDateDatasetHiddenByObjectAvailability, onDateDatasetFilterEnabled: handleDateFilterEnabled }),
        !!shouldRenderDateDataSetsDropdown && (React.createElement(DateDatasetPicker, { relatedDateDatasets: relatedDateDatasets, dateFromVisualization: dateFromVisualization, widget: widget, width: CONFIG_PANEL_DATE_FILTER_WIDTH, selectedDateDataset: selectedDateDataset, selectedDateDatasetHidden: selectedDateDatasetHiddenByObjectAvailability, unrelatedDateDataset: unrelatedDateDataset, onDateDatasetChange: handleDateDatasetChanged, autoOpen: shouldPickDateDataset, isLoading: isDropdownLoading }))));
};
//# sourceMappingURL=DateDatasetFilter.js.map