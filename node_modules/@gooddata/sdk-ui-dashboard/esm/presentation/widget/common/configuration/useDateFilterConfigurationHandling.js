import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import { useCallback, useState } from "react";
import { idRef, isInsightWidget, widgetRef } from "@gooddata/sdk-model";
import invariant from "ts-invariant";
import first from "lodash/first";
import { disableInsightWidgetDateFilter, disableKpiWidgetDateFilter, enableInsightWidgetDateFilter, enableKpiWidgetDateFilter, useDashboardCommandProcessing, } from "../../../../model";
import { getRecommendedDateDataset } from "@gooddata/sdk-ui-kit";
import { safeSerializeObjRef } from "../../../../_staging/metadata/safeSerializeObjRef";
function getRecommendedCatalogDateDataset(dateDatasets) {
    var _a;
    var recommendedDateDataSetId = (_a = getRecommendedDateDataset(dateDatasets.map(function (ds) {
        return {
            id: ds.dataSet.id,
            title: ds.dataSet.title,
        };
    }))) === null || _a === void 0 ? void 0 : _a.id;
    return recommendedDateDataSetId
        ? dateDatasets.find(function (ds) { return ds.dataSet.id === recommendedDateDataSetId; })
        : undefined;
}
export function useDateFilterConfigurationHandling(widget, relatedDateDatasets, onAppliedChanged) {
    var _a = __read(useState("ok"), 2), status = _a[0], setStatus = _a[1];
    var ref = widgetRef(widget);
    var disableKpiDateFilter = useDashboardCommandProcessing({
        commandCreator: disableKpiWidgetDateFilter,
        successEvent: "GDC.DASH/EVT.KPI_WIDGET.FILTER_SETTINGS_CHANGED",
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        onBeforeRun: function () {
            onAppliedChanged(false);
        },
    }).run;
    var enableKpiDateFilter = useDashboardCommandProcessing({
        commandCreator: enableKpiWidgetDateFilter,
        successEvent: "GDC.DASH/EVT.KPI_WIDGET.FILTER_SETTINGS_CHANGED",
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        onBeforeRun: function () {
            onAppliedChanged(true);
            setStatus("loading");
        },
        onError: function () {
            setStatus("error");
        },
        onSuccess: function (_command) {
            setStatus("ok");
        },
    }).run;
    var disableInsightDateFilter = useDashboardCommandProcessing({
        commandCreator: disableInsightWidgetDateFilter,
        successEvent: "GDC.DASH/EVT.INSIGHT_WIDGET.FILTER_SETTINGS_CHANGED",
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        onBeforeRun: function () {
            onAppliedChanged(false);
        },
    }).run;
    var enableInsightDateFilter = useDashboardCommandProcessing({
        commandCreator: enableInsightWidgetDateFilter,
        successEvent: "GDC.DASH/EVT.INSIGHT_WIDGET.FILTER_SETTINGS_CHANGED",
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        onBeforeRun: function () {
            onAppliedChanged(true);
            setStatus("loading");
        },
        onError: function () {
            setStatus("error");
        },
        onSuccess: function (_command) {
            setStatus("ok");
        },
    }).run;
    var handleDateFilterEnabled = useCallback(function (enabled, dateDatasetRef) {
        var getPreselectedDateDataset = function () {
            invariant(relatedDateDatasets === null || relatedDateDatasets === void 0 ? void 0 : relatedDateDatasets.length, "Date filtering enabled without a date dataset available.");
            // preselect the recommended if any, or the first one
            var recommendedDateDataSet = getRecommendedCatalogDateDataset(relatedDateDatasets);
            var firstDataSet = first(relatedDateDatasets);
            return recommendedDateDataSet
                ? recommendedDateDataSet.dataSet.ref
                : firstDataSet.dataSet.ref;
        };
        var enable = isInsightWidget(widget) ? enableInsightDateFilter : enableKpiDateFilter;
        var disable = isInsightWidget(widget) ? disableInsightDateFilter : disableKpiDateFilter;
        if (enabled) {
            if (dateDatasetRef) {
                enable(ref, dateDatasetRef);
            }
            else {
                var preselectedDateDataSetRef = getPreselectedDateDataset();
                enable(ref, preselectedDateDataSetRef);
            }
        }
        else {
            disable(ref);
        }
    }, [
        isInsightWidget(widget),
        safeSerializeObjRef(ref),
        enableInsightDateFilter,
        disableInsightDateFilter,
        enableKpiDateFilter,
        disableKpiDateFilter,
        relatedDateDatasets,
    ]);
    var handleDateDatasetChanged = useCallback(function (id) {
        if (isInsightWidget(widget)) {
            enableInsightDateFilter(ref, idRef(id, "dataSet"));
        }
        else {
            enableKpiDateFilter(ref, idRef(id, "dataSet"));
        }
    }, [isInsightWidget(widget), safeSerializeObjRef(ref)]);
    return {
        status: status,
        handleDateDatasetChanged: handleDateDatasetChanged,
        handleDateFilterEnabled: handleDateFilterEnabled,
    };
}
//# sourceMappingURL=useDateFilterConfigurationHandling.js.map