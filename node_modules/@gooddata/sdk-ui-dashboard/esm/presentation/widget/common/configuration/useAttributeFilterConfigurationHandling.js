import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import { useCallback, useState } from "react";
import { isInsightWidget, widgetRef } from "@gooddata/sdk-model";
import { ignoreFilterOnInsightWidget, ignoreFilterOnKpiWidget, unignoreFilterOnInsightWidget, unignoreFilterOnKpiWidget, useDashboardCommandProcessing, } from "../../../../model";
import { safeSerializeObjRef } from "../../../../_staging/metadata/safeSerializeObjRef";
export function useAttributeFilterConfigurationHandling(widget, displayFormRef, onAppliedChanged) {
    var _a = __read(useState("ok"), 2), status = _a[0], setStatus = _a[1];
    var ref = widgetRef(widget);
    var ignoreKpiFilter = useDashboardCommandProcessing({
        commandCreator: ignoreFilterOnKpiWidget,
        successEvent: "GDC.DASH/EVT.KPI_WIDGET.FILTER_SETTINGS_CHANGED",
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        onBeforeRun: function () {
            onAppliedChanged(false);
        },
    }).run;
    var unignoreKpiFilter = useDashboardCommandProcessing({
        commandCreator: unignoreFilterOnKpiWidget,
        successEvent: "GDC.DASH/EVT.KPI_WIDGET.FILTER_SETTINGS_CHANGED",
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        onBeforeRun: function () {
            onAppliedChanged(true);
            setStatus("loading");
        },
        onError: function () {
            setStatus("error");
        },
        onSuccess: function () {
            setStatus("ok");
        },
    }).run;
    var ignoreInsightFilter = useDashboardCommandProcessing({
        commandCreator: ignoreFilterOnInsightWidget,
        successEvent: "GDC.DASH/EVT.INSIGHT_WIDGET.FILTER_SETTINGS_CHANGED",
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        onBeforeRun: function () {
            onAppliedChanged(false);
        },
    }).run;
    var unignoreInsightFilter = useDashboardCommandProcessing({
        commandCreator: unignoreFilterOnInsightWidget,
        successEvent: "GDC.DASH/EVT.INSIGHT_WIDGET.FILTER_SETTINGS_CHANGED",
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        onBeforeRun: function () {
            onAppliedChanged(true);
            setStatus("loading");
        },
        onError: function () {
            setStatus("error");
        },
        onSuccess: function () {
            setStatus("ok");
        },
    }).run;
    var handleIgnoreChanged = useCallback(function (ignored) {
        var ignore = isInsightWidget(widget) ? ignoreInsightFilter : ignoreKpiFilter;
        var unignore = isInsightWidget(widget) ? unignoreInsightFilter : unignoreKpiFilter;
        if (ignored) {
            unignore(ref, displayFormRef);
        }
        else {
            ignore(ref, displayFormRef);
        }
    }, [
        isInsightWidget(widget),
        safeSerializeObjRef(displayFormRef),
        safeSerializeObjRef(ref),
        ignoreInsightFilter,
        ignoreKpiFilter,
        unignoreInsightFilter,
        unignoreKpiFilter,
    ]);
    return {
        status: status,
        handleIgnoreChanged: handleIgnoreChanged,
    };
}
//# sourceMappingURL=useAttributeFilterConfigurationHandling.js.map