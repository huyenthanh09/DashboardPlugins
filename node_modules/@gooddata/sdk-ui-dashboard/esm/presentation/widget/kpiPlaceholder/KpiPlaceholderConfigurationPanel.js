// (C) 2022 GoodData Corporation
import React, { useCallback } from "react";
import invariant from "ts-invariant";
import { eagerRemoveSectionItem, replaceSectionItem, selectAllCatalogMeasuresMap, selectSettings, selectWidgetCoordinatesByRef, uiActions, useDashboardCommandProcessing, useDashboardDispatch, useDashboardSelector, } from "../../../model";
import { getSizeInfo } from "../../../_staging/layout/sizing";
import { KpiConfigurationPanelCore } from "../kpi/DefaultKpiConfigurationPanel/KpiConfigurationPanelCore";
export var KpiPlaceholderConfigurationPanel = function (props) {
    var widget = props.widget;
    var dispatch = useDashboardDispatch();
    var settings = useDashboardSelector(selectSettings);
    var measuresMap = useDashboardSelector(selectAllCatalogMeasuresMap);
    var _a = useDashboardSelector(selectWidgetCoordinatesByRef(widget.ref)), itemIndex = _a.itemIndex, sectionIndex = _a.sectionIndex;
    var replaceKpiProcessing = useDashboardCommandProcessing({
        commandCreator: replaceSectionItem,
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        successEvent: "GDC.DASH/EVT.FLUID_LAYOUT.ITEM_REPLACED",
        onSuccess: function (event) {
            var ref = event.payload.items[0].widget.ref;
            dispatch(uiActions.selectWidget(ref));
            dispatch(uiActions.setConfigurationPanelOpened(true));
        },
    });
    var handleMeasureChanged = useCallback(function (measureRef) {
        var measure = measuresMap.get(measureRef);
        invariant(measure, "Invalid measure when creating a KPI");
        var sizeInfo = getSizeInfo(settings, "kpi");
        // replace the placeholder that is already in place
        replaceKpiProcessing.run(sectionIndex, itemIndex, {
            type: "IDashboardLayoutItem",
            size: {
                xl: {
                    gridHeight: sizeInfo.height.default,
                    gridWidth: sizeInfo.width.default,
                },
            },
            widget: {
                type: "kpi",
                description: "",
                drills: [],
                ignoreDashboardFilters: [],
                kpi: {
                    comparisonType: "previousPeriod",
                    metric: measureRef,
                    comparisonDirection: "growIsGood",
                },
                title: measure.measure.title,
                dateDataSet: undefined,
            },
        });
    }, [measuresMap, settings, replaceKpiProcessing, sectionIndex, itemIndex]);
    var handlePanelClosed = useCallback(function () {
        dispatch(uiActions.setConfigurationPanelOpened(false));
        dispatch(eagerRemoveSectionItem(sectionIndex, itemIndex));
    }, [dispatch, itemIndex, sectionIndex]);
    return React.createElement(KpiConfigurationPanelCore, { onMeasureChange: handleMeasureChanged, onClose: handlePanelClosed });
};
//# sourceMappingURL=KpiPlaceholderConfigurationPanel.js.map