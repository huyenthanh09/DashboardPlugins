import { __assign, __read } from "tslib";
// (C) 2021-2022 GoodData Corporation
import React, { useState } from "react";
import cx from "classnames";
import { Separator } from "@gooddata/sdk-ui-kit";
import { DashboardInsightMenuContainer } from "./DashboardInsightMenuContainer";
import { DashboardInsightMenuItemButton } from "./DashboardInsightMenuItemButton";
import { DashboardInsightSubmenuContainer } from "./DashboardInsightSubmenuContainer";
import { selectIsInEditMode, useDashboardSelector } from "../../../../../model";
import { ConfigurationBubble } from "../../../common";
import { DashboardInsightMenuBubble } from "./DashboardInsightMenuBubble";
var DashboardInsightMenuBody = function (props) {
    var items = props.items, widget = props.widget, onClose = props.onClose;
    var _a = __read(useState(null), 2), submenu = _a[0], setSubmenu = _a[1];
    return submenu ? (React.createElement(DashboardInsightSubmenuContainer, { onClose: onClose, title: submenu.itemName, onBack: function () { return setSubmenu(null); } },
        React.createElement(submenu.SubmenuComponent, { widget: widget }))) : (React.createElement(DashboardInsightMenuContainer, { onClose: onClose, widget: widget },
        React.createElement(DashboardInsightMenuRoot, { items: items, setSubmenu: setSubmenu })));
};
export var DashboardInsightMenu = function (props) {
    var widget = props.widget, onClose = props.onClose;
    var isInEditMode = useDashboardSelector(selectIsInEditMode);
    return isInEditMode ? (React.createElement(ConfigurationBubble, { classNames: cx("edit-insight-config", "s-edit-insight-config", "edit-insight-config-arrow-color", "edit-insight-config-title-1-line"), onClose: onClose },
        React.createElement(DashboardInsightMenuBody, __assign({}, props)))) : (React.createElement(DashboardInsightMenuBubble, { onClose: onClose, widget: widget },
        React.createElement(DashboardInsightMenuBody, __assign({}, props))));
};
var DashboardInsightMenuRoot = function (_a) {
    var items = _a.items, setSubmenu = _a.setSubmenu;
    return (React.createElement(React.Fragment, null, items.map(function (item) {
        if (item.type === "separator") {
            return React.createElement(Separator, { key: item.itemId });
        }
        if (item.type === "submenu") {
            return (React.createElement(DashboardInsightMenuItemButton, __assign({ key: item.itemId }, item, { onClick: function () { return setSubmenu(item); }, submenu: true })));
        }
        return React.createElement(DashboardInsightMenuItemButton, __assign({ key: item.itemId }, item));
    })));
};
//# sourceMappingURL=index.js.map