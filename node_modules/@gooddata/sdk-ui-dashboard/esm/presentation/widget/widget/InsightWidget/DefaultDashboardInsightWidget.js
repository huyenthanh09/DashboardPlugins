import { __assign } from "tslib";
// (C) 2020-2022 GoodData Corporation
import React, { useMemo, useCallback } from "react";
import cx from "classnames";
import { useIntl } from "react-intl";
import { insightVisualizationUrl, widgetTitle } from "@gooddata/sdk-model";
import { useDashboardSelector, isCustomWidget, useDashboardScheduledEmails, selectCanExportReport, } from "../../../../model";
import { DashboardItem, DashboardItemHeadline, DashboardItemVisualization, getVisTypeCssClass, } from "../../../presentationComponents";
import { DashboardInsight } from "../../insight";
import { useInsightExport } from "../../common";
import { useDashboardComponentsContext } from "../../../dashboardContexts";
import { useInsightMenu } from "./useInsightMenu";
import { DashboardWidgetInsightGuard } from "./DashboardWidgetInsightGuard";
export var DefaultDashboardInsightWidget = function (props) {
    return React.createElement(DashboardWidgetInsightGuard, __assign({}, props, { Component: DefaultDashboardInsightWidgetCore }));
};
/**
 * @internal
 */
var DefaultDashboardInsightWidgetCore = function (_a) {
    var widget = _a.widget, insight = _a.insight, screen = _a.screen, onError = _a.onError, onExportReady = _a.onExportReady, onLoadingChanged = _a.onLoadingChanged, dashboardItemClasses = _a.dashboardItemClasses;
    var intl = useIntl();
    var visType = insightVisualizationUrl(insight).split(":")[1];
    var widgetRef = widget.ref;
    var _b = useInsightExport({
        widgetRef: widgetRef,
        title: widgetTitle(widget) || intl.formatMessage({ id: "export.defaultTitle" }),
        insight: insight,
    }), exportCSVEnabled = _b.exportCSVEnabled, exportXLSXEnabled = _b.exportXLSXEnabled, onExportCSV = _b.onExportCSV, onExportXLSX = _b.onExportXLSX;
    var _c = useDashboardScheduledEmails(), isScheduledEmailingVisible = _c.isScheduledEmailingVisible, enableInsightExportScheduling = _c.enableInsightExportScheduling, onScheduleEmailingOpen = _c.onScheduleEmailingOpen;
    var canExportReport = useDashboardSelector(selectCanExportReport);
    var onScheduleExport = useCallback(function () {
        onScheduleEmailingOpen(widgetRef);
    }, [onScheduleEmailingOpen, widgetRef]);
    var scheduleExportEnabled = !isCustomWidget(widget);
    var _d = useInsightMenu({
        insight: insight,
        widget: widget,
        exportCSVEnabled: exportCSVEnabled,
        exportXLSXEnabled: exportXLSXEnabled,
        scheduleExportEnabled: scheduleExportEnabled,
        onExportCSV: onExportCSV,
        onExportXLSX: onExportXLSX,
        onScheduleExport: onScheduleExport,
        isScheduleExportVisible: isScheduledEmailingVisible && canExportReport && enableInsightExportScheduling,
    }), closeMenu = _d.closeMenu, isMenuOpen = _d.isMenuOpen, menuItems = _d.menuItems, openMenu = _d.openMenu;
    var _e = useDashboardComponentsContext(), InsightMenuButtonComponentProvider = _e.InsightMenuButtonComponentProvider, InsightMenuComponentProvider = _e.InsightMenuComponentProvider, ErrorComponent = _e.ErrorComponent, LoadingComponent = _e.LoadingComponent;
    var InsightMenuButtonComponent = useMemo(function () { return InsightMenuButtonComponentProvider(insight, widget); }, [InsightMenuButtonComponentProvider, insight, widget]);
    var InsightMenuComponent = useMemo(function () { return InsightMenuComponentProvider(insight, widget); }, [InsightMenuComponentProvider, insight, widget]);
    return (React.createElement(DashboardItem, { className: cx(dashboardItemClasses, "type-visualization", "gd-dashboard-view-widget", getVisTypeCssClass(widget.type, visType)), screen: screen },
        React.createElement(DashboardItemVisualization, { renderHeadline: function (clientHeight) {
                var _a;
                return !((_a = widget.configuration) === null || _a === void 0 ? void 0 : _a.hideTitle) && (React.createElement(DashboardItemHeadline, { title: widget.title, clientHeight: clientHeight }));
            }, renderBeforeVisualization: function () { return (React.createElement(React.Fragment, null,
                React.createElement(InsightMenuButtonComponent, { insight: insight, widget: widget, isOpen: isMenuOpen, onClick: openMenu, items: menuItems }))); }, renderAfterContent: function () {
                if (!isMenuOpen) {
                    return null;
                }
                return (React.createElement(InsightMenuComponent, { insight: insight, widget: widget, isOpen: isMenuOpen, onClose: closeMenu, items: menuItems }));
            } }, function (_a) {
            var clientHeight = _a.clientHeight, clientWidth = _a.clientWidth;
            return (React.createElement(DashboardInsight, { clientHeight: clientHeight, clientWidth: clientWidth, insight: insight, widget: widget, onExportReady: onExportReady, onLoadingChanged: onLoadingChanged, onError: onError, ErrorComponent: ErrorComponent, LoadingComponent: LoadingComponent }));
        })));
};
//# sourceMappingURL=DefaultDashboardInsightWidget.js.map