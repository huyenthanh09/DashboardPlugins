import { __assign } from "tslib";
// (C) 2020-2022 GoodData Corporation
import React, { useMemo } from "react";
import cx from "classnames";
import { insightVisualizationUrl, widgetRef } from "@gooddata/sdk-model";
import { DashboardItem, DashboardItemHeadline, DashboardItemVisualization, getVisTypeCssClass, } from "../../../presentationComponents";
import { DashboardInsight } from "../../insight";
import { useDashboardComponentsContext } from "../../../dashboardContexts";
import { selectIsDashboardSaving, useDashboardSelector, useWidgetSelection } from "../../../../model";
import { useEditableInsightMenu } from "./useEditableInsightMenu";
import { DashboardWidgetInsightGuard } from "./DashboardWidgetInsightGuard";
export var EditableDashboardInsightWidget = function (props) {
    return React.createElement(DashboardWidgetInsightGuard, __assign({}, props, { Component: EditableDashboardInsightWidgetCore }));
};
/**
 * @internal
 */
var EditableDashboardInsightWidgetCore = function (_a) {
    var widget = _a.widget, insight = _a.insight, screen = _a.screen, onError = _a.onError, onExportReady = _a.onExportReady, onLoadingChanged = _a.onLoadingChanged, dashboardItemClasses = _a.dashboardItemClasses;
    var visType = insightVisualizationUrl(insight).split(":")[1];
    var _b = useWidgetSelection(widgetRef(widget)), isSelectable = _b.isSelectable, isSelected = _b.isSelected, onSelected = _b.onSelected, closeConfigPanel = _b.closeConfigPanel, hasConfigPanelOpen = _b.hasConfigPanelOpen;
    var menuItems = useEditableInsightMenu({ closeMenu: closeConfigPanel, insight: insight, widget: widget }).menuItems;
    var _c = useDashboardComponentsContext(), InsightMenuComponentProvider = _c.InsightMenuComponentProvider, ErrorComponent = _c.ErrorComponent, LoadingComponent = _c.LoadingComponent;
    var InsightMenuComponent = useMemo(function () { return InsightMenuComponentProvider(insight, widget); }, [InsightMenuComponentProvider, insight, widget]);
    var isSaving = useDashboardSelector(selectIsDashboardSaving);
    var isEditable = !isSaving;
    return (React.createElement(DashboardItem, { className: cx(dashboardItemClasses, "type-visualization", "gd-dashboard-view-widget", "is-edit-mode", getVisTypeCssClass(widget.type, visType), { "is-selected": isSelected }), screen: screen },
        React.createElement(DashboardItemVisualization, { isSelectable: isSelectable, isSelected: isSelected, onSelected: onSelected, renderHeadline: function (clientHeight) {
                var _a;
                return !((_a = widget.configuration) === null || _a === void 0 ? void 0 : _a.hideTitle) && (React.createElement(DashboardItemHeadline, { title: widget.title, clientHeight: clientHeight }));
            }, renderAfterContent: function () {
                return (React.createElement(React.Fragment, null,
                    !!isSelected && (React.createElement("div", { className: "dash-item-action dash-item-action-lw-options", onClick: onSelected })),
                    !!hasConfigPanelOpen && (React.createElement(InsightMenuComponent, { insight: insight, widget: widget, isOpen: hasConfigPanelOpen, onClose: closeConfigPanel, items: menuItems }))));
            }, contentClassName: cx({ "is-editable": isEditable }), visualizationClassName: cx({ "is-editable": isEditable }) }, function (_a) {
            var clientHeight = _a.clientHeight, clientWidth = _a.clientWidth;
            return (React.createElement(DashboardInsight, { clientHeight: clientHeight, clientWidth: clientWidth, insight: insight, widget: widget, onExportReady: onExportReady, onLoadingChanged: onLoadingChanged, onError: onError, ErrorComponent: ErrorComponent, LoadingComponent: LoadingComponent }));
        })));
};
//# sourceMappingURL=EditableDashboardInsightWidget.js.map