// (C) 2007-2022 GoodData Corporation
import React from "react";
import { Dropdown, DropdownButton } from "@gooddata/sdk-ui-kit";
import { isInsight, insightVisualizationUrl } from "@gooddata/sdk-model";
import { useIntl } from "react-intl";
import { isDrillToInsightConfig } from "../../../../drill/types";
import { InsightList } from "../../../../insightList";
import { selectInsightsMap, useDashboardSelector } from "../../../../../model";
var DROPDOWN_ALIGN_POINTS = [
    {
        align: "bl tl",
        offset: {
            x: 0,
            y: 4,
        },
    },
    {
        align: "tl bl",
        offset: {
            x: 0,
            y: -4,
        },
    },
];
function getButtonValue(title, intl, ref) {
    if (!ref) {
        return intl.formatMessage({ id: "configurationPanel.drillConfig.selectInsight" });
    }
    return title || intl.formatMessage({ id: "loading" });
}
export var InsightDropdown = function (_a) {
    var insightConfig = _a.insightConfig, onSelect = _a.onSelect;
    var intl = useIntl();
    var insights = useDashboardSelector(selectInsightsMap);
    var buttonText = "";
    var insightType = null;
    if (isDrillToInsightConfig(insightConfig) && insightConfig.insightRef) {
        var insight = insights.get(insightConfig.insightRef);
        if (isInsight(insight)) {
            buttonText = getButtonValue(insight.insight.title, intl, insightConfig.insightRef);
            var insightUrl = insightVisualizationUrl(insight);
            insightType = insightUrl === null || insightUrl === void 0 ? void 0 : insightUrl.split(":")[1];
        }
    }
    return (React.createElement(Dropdown, { className: "s-report_select report-select", closeOnMouseDrag: true, alignPoints: DROPDOWN_ALIGN_POINTS, renderButton: function (_a) {
            var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
            return (React.createElement(DropdownButton, { value: buttonText, onClick: toggleDropdown, isOpen: isOpen, isSmall: false, iconLeft: insightType ? "gd-vis-type-" + insightType : undefined, className: "gd-button-small s-visualization-button-target-insight" }));
        }, renderBody: function (_a) {
            var closeDropdown = _a.closeDropdown;
            return (React.createElement("div", { className: "open-visualizations s-open-visualizations" },
                React.createElement(InsightList, { selectedRef: isDrillToInsightConfig(insightConfig) ? insightConfig.insightRef : undefined, height: 200, onSelect: function (insight) {
                        onSelect(insight);
                        closeDropdown();
                    } })));
        } }));
};
//# sourceMappingURL=InsightDropdown.js.map