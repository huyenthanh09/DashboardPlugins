import { __assign, __read, __spread } from "tslib";
// (C) 2019-2022 GoodData Corporation
import { isInsightWidget } from "@gooddata/sdk-model";
import React, { useState } from "react";
import { FormattedMessage } from "react-intl";
import { Typography } from "@gooddata/sdk-ui-kit";
import { InsightDrillConfigList } from "./InsightDrillConfigList";
import { modifyDrillsForInsightWidget, selectDrillTargetsByWidgetRef, selectWidgetByRef, useDashboardDispatch, useDashboardSelector, } from "../../../../model";
import { DrillOriginSelector } from "./DrillOriginSelector/DrillOriginSelector";
import invariant from "ts-invariant";
import { getMappedConfigForWidget } from "./getMappedConfigForWidget";
import { useDrillTargetTypeItems } from "./useDrillTargetTypeItems";
import { isAvailableDrillTargetMeasure } from "../../../drill/types";
var mergeDrillConfigItems = function (drillConfigItems, incompleteItems) {
    return incompleteItems.reduce(function (acc, incompleteItem) {
        var found = acc.findIndex(function (item) { return item.localIdentifier === incompleteItem.localIdentifier; });
        if (found !== -1) {
            acc[found] = incompleteItem;
        }
        else {
            acc.push(incompleteItem);
        }
        return acc;
    }, __spread(drillConfigItems));
};
var addOrUpdateDrillConfigItem = function (drillConfigItems, newItem) {
    var found = drillConfigItems.findIndex(function (drillConfigItem) { return drillConfigItem.localIdentifier === newItem.localIdentifier; });
    if (found !== -1) {
        var incompleteItemsUpdated = __spread(drillConfigItems);
        incompleteItemsUpdated[found] = newItem;
        return incompleteItemsUpdated;
    }
    else {
        return __spread(drillConfigItems, [newItem]);
    }
};
var getUnusedDrillTargets = function (availableDrillTargets, mergedItems) {
    var _a, _b;
    var availableDrillTargetMeasures = (_a = availableDrillTargets === null || availableDrillTargets === void 0 ? void 0 : availableDrillTargets.measures) === null || _a === void 0 ? void 0 : _a.filter(function (measure) {
        return !mergedItems.some(function (item) {
            return item.type === "measure" &&
                item.localIdentifier === measure.measure.measureHeaderItem.localIdentifier;
        });
    });
    var availableDrillTargetAttributes = (_b = availableDrillTargets === null || availableDrillTargets === void 0 ? void 0 : availableDrillTargets.attributes) === null || _b === void 0 ? void 0 : _b.filter(function (attribute) {
        return !mergedItems.some(function (item) {
            return item.type === "attribute" &&
                item.localIdentifier === attribute.attribute.attributeHeader.localIdentifier;
        });
    });
    return {
        measures: availableDrillTargetMeasures,
        attributes: availableDrillTargetAttributes,
    };
};
export var InsightDrillConfigPanel = function (_a) {
    var widgetRef = _a.widgetRef;
    var _b = __read(useState([]), 2), incompleteItems = _b[0], updateIncompleteItems = _b[1];
    var enabledDrillTargetTypeItems = useDrillTargetTypeItems();
    var addIncompleteItem = function (item) {
        updateIncompleteItems(addOrUpdateDrillConfigItem(incompleteItems, item));
    };
    var deleteIncompleteItem = function (item) {
        var incompleteItemsUpdated = incompleteItems.filter(function (incompleteItem) { return incompleteItem.localIdentifier !== item.localIdentifier; });
        updateIncompleteItems(incompleteItemsUpdated);
    };
    var onChangeItem = function (changedItem) {
        var incompleteItem = __assign(__assign({}, changedItem), { complete: false });
        addIncompleteItem(incompleteItem);
    };
    var onOriginSelect = function (selectedItem) {
        if (isAvailableDrillTargetMeasure(selectedItem)) {
            var incompleteMeasureItem = {
                type: "measure",
                localIdentifier: selectedItem.measure.measureHeaderItem.localIdentifier,
                title: selectedItem.measure.measureHeaderItem.name,
                attributes: selectedItem.attributes,
                drillTargetType: undefined,
                complete: false,
            };
            addIncompleteItem(incompleteMeasureItem);
        }
        else {
            var incompleteAttributeItem = {
                type: "attribute",
                localIdentifier: selectedItem.attribute.attributeHeader.localIdentifier,
                title: selectedItem.attribute.attributeHeader.formOf.name,
                attributes: selectedItem.intersectionAttributes,
                drillTargetType: undefined,
                complete: false,
            };
            addIncompleteItem(incompleteAttributeItem);
        }
    };
    var configItems = useDashboardSelector(selectDrillTargetsByWidgetRef(widgetRef));
    var widget = useDashboardSelector(selectWidgetByRef(widgetRef));
    invariant(isInsightWidget(widget), "must be insight widget");
    var drillItems = (configItems === null || configItems === void 0 ? void 0 : configItems.availableDrillTargets) ? getMappedConfigForWidget(widget.drills, configItems === null || configItems === void 0 ? void 0 : configItems.availableDrillTargets)
        : [];
    var dispatch = useDashboardDispatch();
    var mergedItems = mergeDrillConfigItems(drillItems, incompleteItems);
    return (React.createElement("div", { className: "configuration-category s-drill-config-panel" },
        React.createElement(Typography, { tagName: "h3" },
            React.createElement("span", null,
                React.createElement(FormattedMessage, { id: "configurationPanel.drillConfig.interactions" }))),
        React.createElement(InsightDrillConfigList, { drillConfigItems: mergedItems, 
            // onDelete={onDeleteItem}
            onSetup: function (drill, changedItem) {
                dispatch(modifyDrillsForInsightWidget(widgetRef, [drill]));
                deleteIncompleteItem(changedItem);
            }, onIncompleteChange: onChangeItem, enabledDrillTargetTypeItems: enabledDrillTargetTypeItems }),
        (configItems === null || configItems === void 0 ? void 0 : configItems.availableDrillTargets) && (React.createElement(DrillOriginSelector, { items: getUnusedDrillTargets(configItems === null || configItems === void 0 ? void 0 : configItems.availableDrillTargets, mergedItems), onSelect: onOriginSelect }))));
};
//# sourceMappingURL=InsightDrillConfigPanel.js.map