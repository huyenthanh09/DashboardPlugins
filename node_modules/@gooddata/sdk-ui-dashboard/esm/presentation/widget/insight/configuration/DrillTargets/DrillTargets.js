import { __assign } from "tslib";
// (C) 2020-2022 GoodData Corporation
import React from "react";
import { idRef, } from "@gooddata/sdk-model";
import { DRILL_TARGET_TYPE, isDrillToDashboardConfig, isDrillToUrlConfig, } from "../../../../drill/types";
import { DrillTargetInsightItem } from "./DrillTargetInsightItem";
import { DrillTargetUrlItem } from "./DrillTargetUrlItem";
import { DrillTargetDashboardItem } from "./DrillTargetDashboardItem";
export var DrillTargets = function (props) {
    var item = props.item;
    var onInsightTargetSelect = function (targetItem) {
        var drillConfigItem = {
            transition: "pop-up",
            origin: {
                type: "drillFromMeasure",
                measure: { localIdentifier: item.localIdentifier },
            },
            type: "drillToInsight",
            target: targetItem.insight.ref,
        };
        props.onSetup(drillConfigItem, __assign(__assign({}, item), { insightRef: targetItem.insight.ref }));
    };
    var onDashboardTargetSelect = function (targetItem) {
        var dashboard = idRef(targetItem.identifier, "analyticalDashboard");
        var drillConfigItem = {
            transition: "in-place",
            origin: {
                type: "drillFromMeasure",
                measure: { localIdentifier: item.localIdentifier },
            },
            type: "drillToDashboard",
            target: dashboard,
        };
        props.onSetup(drillConfigItem, __assign(__assign({}, item), { dashboard: dashboard }));
    };
    var onCustomUrlTargetSelect = function () {
        return;
        // const drillConfigItem: IDrillToUrlConfig = {
        //     ...props.item,
        //     drillTargetType: DRILL_TARGET_TYPE.DRILL_TO_URL,
        //     urlDrillTarget: selectedUrlDrillTarget,
        //     complete: true,
        // };
        // props.onSetup(drillConfigItem, { urlDrillTarget: selectedUrlDrillTarget });
    };
    switch (props.item.drillTargetType) {
        case DRILL_TARGET_TYPE.DRILL_TO_DASHBOARD:
            return (React.createElement(DrillTargetDashboardItem, { selected: isDrillToDashboardConfig(item) ? item.dashboard : undefined, onSelect: onDashboardTargetSelect }));
        case DRILL_TARGET_TYPE.DRILL_TO_INSIGHT:
            return React.createElement(DrillTargetInsightItem, { insight: item, onSelect: onInsightTargetSelect });
        case DRILL_TARGET_TYPE.DRILL_TO_URL:
            return (React.createElement(DrillTargetUrlItem, { urlDrillTarget: isDrillToUrlConfig(item) ? item.urlDrillTarget : undefined, attributes: item.attributes, onSelect: onCustomUrlTargetSelect }));
        case undefined:
            return null;
        default:
            unknownDrillTargetTypeReceived(props.item.drillTargetType);
    }
    function unknownDrillTargetTypeReceived(targetType) {
        throw new Error("unknown drill target type: " + targetType);
    }
    return null;
};
//# sourceMappingURL=DrillTargets.js.map