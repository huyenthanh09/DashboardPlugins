import { __assign, __read } from "tslib";
// (C) 2020-2022 GoodData Corporation
import React, { useState } from "react";
import { useIntl } from "react-intl";
import { Button, Dropdown } from "@gooddata/sdk-ui-kit";
import { isCatalogAttribute, } from "@gooddata/sdk-model";
import { isDrillToAttributeUrlConfig, isDrillToCustomUrlConfig, } from "../../../../drill/types";
import { CustomUrlSection } from "../../../../drill/DrillConfigPanel/DrillToUrl/CustomUrlSection";
import { CustomUrlEditor } from "../../../../drill/DrillConfigPanel/DrillToUrl/CustomUrlEditor";
import { useClientWorkspaceIdentifiers } from "@gooddata/sdk-ui";
import { AttributeUrlSection } from "../../../../drill/DrillConfigPanel/DrillToUrl/AttributeUrlSection";
import { selectAllCatalogAttributesMap, selectAllCatalogDisplayFormsMap, selectDrillTargetsByWidgetRef, selectSelectedWidgetRef, useDashboardSelector, selectImplicitDrillsToUrlByWidgetRef, } from "../../../../../model";
import invariant from "ts-invariant";
var getButtonValue = function (urlDrillTarget, attributeDisplayForms, attributeDisplayFormsLoading, intl) {
    if (isDrillToCustomUrlConfig(urlDrillTarget) && urlDrillTarget.customUrl) {
        return urlDrillTarget.customUrl;
    }
    else if (isDrillToAttributeUrlConfig(urlDrillTarget) &&
        urlDrillTarget.drillToAttributeDisplayForm &&
        urlDrillTarget.insightAttributeDisplayForm) {
        if (attributeDisplayFormsLoading) {
            return intl.formatMessage({ id: "dropdown.loading" });
        }
        var drillToAttributeDisplayForm = attributeDisplayForms.get(urlDrillTarget.drillToAttributeDisplayForm);
        var insightAttributeDisplayForm = attributeDisplayForms.get(urlDrillTarget.insightAttributeDisplayForm);
        return (insightAttributeDisplayForm === null || insightAttributeDisplayForm === void 0 ? void 0 : insightAttributeDisplayForm.title) + " (" + (drillToAttributeDisplayForm === null || drillToAttributeDisplayForm === void 0 ? void 0 : drillToAttributeDisplayForm.title) + ")";
    }
    else {
        return intl.formatMessage({ id: "configurationPanel.drillIntoUrl.defaultButtonValue" });
    }
};
var dropdownAlignPoints = [
    {
        align: "bl tl",
    },
    {
        align: "tl bl",
    },
];
export var DrillTargetUrlItem = function (props) {
    var _a, _b;
    var onSelect = props.onSelect, urlDrillTarget = props.urlDrillTarget;
    var attributeDisplayFormsLoading = false; // todo
    var supportsAttributeHyperlinks = true; // todo
    var widgetRef = useDashboardSelector(selectSelectedWidgetRef);
    invariant(widgetRef, "mush have selected widget");
    var attributeUrlDisplayForms = useDashboardSelector(selectImplicitDrillsToUrlByWidgetRef(widgetRef));
    var drillTargets = useDashboardSelector(selectDrillTargetsByWidgetRef(widgetRef));
    var allAttributes = useDashboardSelector(selectAllCatalogAttributesMap);
    var targetAttributes = (_b = (_a = drillTargets === null || drillTargets === void 0 ? void 0 : drillTargets.availableDrillTargets) === null || _a === void 0 ? void 0 : _a.attributes) === null || _b === void 0 ? void 0 : _b.map(function (drillTarget) {
        return allAttributes.get({ identifier: drillTarget.attribute.attributeHeader.formOf.identifier });
    });
    var targetAttributesForms = targetAttributes === null || targetAttributes === void 0 ? void 0 : targetAttributes.flatMap(function (item) {
        return isCatalogAttribute(item) ? item.displayForms : [];
    });
    var intl = useIntl();
    var _c = __read(useState(false), 2), showModal = _c[0], setShowModal = _c[1];
    var toggleModal = function () { return setShowModal(!showModal); };
    var onCustomUrlHandler = function (customUrl) {
        setShowModal(false);
        onSelect({ customUrl: customUrl });
    };
    var onAttributeUrlHandler = function (insightAttributeDisplayForm, drillToAttributeDisplayForm) {
        onSelect({
            insightAttributeDisplayForm: insightAttributeDisplayForm,
            drillToAttributeDisplayForm: drillToAttributeDisplayForm,
        });
    };
    var _d = useClientWorkspaceIdentifiers(), client = _d.client, dataProduct = _d.dataProduct;
    var displayForms = useDashboardSelector(selectAllCatalogDisplayFormsMap);
    if (!urlDrillTarget) {
        return null;
    }
    var buttonValue = getButtonValue(urlDrillTarget, displayForms, attributeDisplayFormsLoading, intl);
    return (React.createElement(React.Fragment, null,
        React.createElement(Dropdown, { alignPoints: dropdownAlignPoints, renderButton: function (_a) {
                var toggleDropdown = _a.toggleDropdown;
                return (React.createElement(Button, { onClick: toggleDropdown, className: "gd-button gd-button-primary button-dropdown dropdown-button gd-button-small s-drill-to-url-button", 
                    // iconRight={dropdownIconRight} // TODO
                    value: buttonValue }));
            }, renderBody: function (_a) {
                var closeDropdown = _a.closeDropdown;
                return (React.createElement("div", { className: "gd-menu-wrapper gd-drill-to-url-body gd-drill-to-url-list s-gd-drill-to-url-body" },
                    supportsAttributeHyperlinks && (React.createElement(AttributeUrlSection, { attributeDisplayForms: attributeUrlDisplayForms, onSelect: function (insightAttributeDisplayForm, drillToAttributeDisplayForm) {
                            onAttributeUrlHandler(insightAttributeDisplayForm, drillToAttributeDisplayForm);
                            closeDropdown();
                        }, loading: attributeDisplayFormsLoading, selected: isDrillToAttributeUrlConfig(urlDrillTarget) &&
                            urlDrillTarget.drillToAttributeDisplayForm, closeDropdown: closeDropdown })),
                    React.createElement(CustomUrlSection, __assign({}, props, { urlDrillTarget: urlDrillTarget, toggleModal: toggleModal, closeDropdown: closeDropdown }))));
            } }),
        showModal && (React.createElement(CustomUrlEditor, { urlDrillTarget: urlDrillTarget, attributeDisplayForms: targetAttributesForms, invalidAttributeDisplayFormIdentifiers: [], loadingAttributeDisplayForms: attributeDisplayFormsLoading, documentationLink: "", enableClientIdParameter: !!client, enableDataProductIdParameter: !!dataProduct, enableWidgetIdParameter: true, onSelect: onCustomUrlHandler, onClose: toggleModal }))));
};
//# sourceMappingURL=DrillTargetUrlItem.js.map