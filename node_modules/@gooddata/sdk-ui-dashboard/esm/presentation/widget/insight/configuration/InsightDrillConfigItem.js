import { __assign } from "tslib";
// (C) 2019-2022 GoodData Corporation
import React from "react";
import cx from "classnames";
import { FormattedMessage } from "react-intl";
import { stringUtils } from "@gooddata/util";
import { DrillOriginItem } from "./DrillOriginItem";
import { DrillTargetType } from "./DrillTargetType";
import { DrillTargets } from "./DrillTargets/DrillTargets";
import { areObjRefsEqual, isAttributeDescriptor } from "@gooddata/sdk-model";
import { selectDrillTargetsByWidgetRef, selectSelectedWidgetRef, useDashboardSelector, selectCatalogDateDatasets, } from "../../../../model";
import invariant from "ts-invariant";
var DrillConfigItem = function (_a) {
    var _b, _c;
    var 
    // onDelete,
    item = _a.item, onIncompleteChange = _a.onIncompleteChange, onSetup = _a.onSetup, enabledDrillTargetTypeItems = _a.enabledDrillTargetTypeItems;
    var onDeleteClick = function () {
        // onDelete(item);
    };
    var onDrillTargetTypeSelect = function (target) {
        onIncompleteChange(__assign(__assign({}, item), { drillTargetType: target }));
    };
    var classNames = cx("s-drill-config-item", "s-drill-config-item-" + stringUtils.simplifyText(item.title), {
    // "s-drill-config-item-incomplete": !item.complete,
    });
    var targetClassNames = cx("s-drill-config-target", "drill-config-target", {
    // "drill-config-target-with-warning": !!item.warning,
    });
    var widgetRef = useDashboardSelector(selectSelectedWidgetRef);
    invariant(widgetRef, "mush have widget selected");
    var drillTargets = useDashboardSelector(selectDrillTargetsByWidgetRef(widgetRef));
    var dateAttributes = useDashboardSelector(selectCatalogDateDatasets);
    var attributeTarget = (_c = (_b = drillTargets === null || drillTargets === void 0 ? void 0 : drillTargets.availableDrillTargets) === null || _b === void 0 ? void 0 : _b.attributes) === null || _c === void 0 ? void 0 : _c.find(function (attribute) { return attribute.attribute.attributeHeader.localIdentifier === item.localIdentifier; });
    var isFromDateAttribute = !!(attributeTarget &&
        isAttributeDescriptor(attributeTarget.attribute) &&
        dateAttributes.some(function (attribute) {
            return attribute.dateAttributes.some(function (dateAttribute) {
                return areObjRefsEqual(dateAttribute.attribute.ref, attributeTarget.attribute.attributeHeader.formOf.ref);
            });
        }));
    return (React.createElement("div", { className: classNames },
        React.createElement("div", { className: "drill-config-item-intro" },
            React.createElement(FormattedMessage, { id: "configurationPanel.drillConfig.clickHintItem", values: {
                    addon: function (chunks) { return React.createElement("span", { className: "addon" }, chunks); },
                } })),
        React.createElement(DrillOriginItem, { type: item.type, title: item.title, localIdentifier: item.localIdentifier, onDelete: onDeleteClick, isDateAttribute: isFromDateAttribute }),
        React.createElement("div", { className: targetClassNames },
            React.createElement("div", { className: "drill-config-target-box" },
                React.createElement("div", { className: "drill-config-item-target" },
                    React.createElement(FormattedMessage, { id: "configurationPanel.drillConfig.selectTarget" })),
                React.createElement(DrillTargetType, { onSelect: onDrillTargetTypeSelect, selection: item.drillTargetType, enabledDrillTargetTypeItems: enabledDrillTargetTypeItems }),
                React.createElement(DrillTargets, { item: item, onSetup: onSetup })))));
};
export default DrillConfigItem;
//# sourceMappingURL=InsightDrillConfigItem.js.map