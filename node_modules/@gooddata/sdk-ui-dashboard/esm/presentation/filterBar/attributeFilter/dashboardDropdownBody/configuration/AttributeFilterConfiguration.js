// (C) 2022 GoodData Corporation
import React, { useEffect, useMemo } from "react";
import { ConfigurationCategory } from "./ConfigurationCategory";
import { ConfigurationPanelHeader } from "./ConfigurationPanelHeader";
import { useDashboardSelector, selectOtherContextAttributeFilters, selectFilterContextAttributeFilters, } from "../../../../../model";
import { ParentFiltersList } from "./parentFilters/ParentFiltersList";
import invariant from "ts-invariant";
import { AttributeDisplayFormsDropdown } from "./displayForms/AttributeDisplayFormsDropdown";
import { useAttributeFilterParentFiltering } from "../../AttributeFilterParentFilteringContext";
import { useConnectingAttributes } from "./hooks/useConnectingAttributes";
import { LoadingSpinner } from "@gooddata/sdk-ui-kit";
import { useTheme } from "@gooddata/sdk-ui-theme-provider";
import { useAttributes } from "./hooks/useAttributes";
export var AttributeFilterConfiguration = function (props) {
    var _a, _b;
    var filterRef = props.filterRef, filterByText = props.filterByText, displayValuesAsText = props.displayValuesAsText, closeHandler = props.closeHandler;
    var theme = useTheme();
    useEffect(function () {
        return function () {
            closeHandler();
        };
    }, [closeHandler]);
    var neighborFilters = useDashboardSelector(selectOtherContextAttributeFilters(filterRef));
    var neighborFilterDisplayForms = useMemo(function () {
        return neighborFilters.map(function (filter) { return filter.attributeFilter.displayForm; });
    }, [neighborFilters]);
    var currentFilter = useDashboardSelector(selectFilterContextAttributeFilters).find(function (filter) {
        return neighborFilters.every(function (neighborFilter) {
            return filter.attributeFilter.localIdentifier !== neighborFilter.attributeFilter.localIdentifier;
        });
    });
    invariant(currentFilter, "Cannot find current filter in the filter context store.");
    var _c = useAttributeFilterParentFiltering(), parents = _c.parents, onParentSelect = _c.onParentSelect, onConnectingAttributeChanged = _c.onConnectingAttributeChanged, showDisplayFormPicker = _c.showDisplayFormPicker, filterDisplayForms = _c.filterDisplayForms, onDisplayFormSelect = _c.onDisplayFormSelect;
    var _d = useConnectingAttributes(currentFilter.attributeFilter.displayForm, neighborFilterDisplayForms), connectingAttributesLoading = _d.connectingAttributesLoading, connectingAttributes = _d.connectingAttributes;
    var _e = useAttributes(neighborFilterDisplayForms), attributes = _e.attributes, attributesLoading = _e.attributesLoading;
    if (connectingAttributesLoading || attributesLoading) {
        return (React.createElement("div", { className: "gd-loading-equalizer-attribute-filter-config-wrap" },
            React.createElement(LoadingSpinner, { className: "large gd-loading-equalizer-spinner", color: (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _a === void 0 ? void 0 : _a.complementary) === null || _b === void 0 ? void 0 : _b.c9 })));
    }
    if (!filterRef || !connectingAttributes || !attributes) {
        return null;
    }
    return (React.createElement("div", { className: "s-attribute-filter-dropdown-configuration attribute-filter-dropdown-configuration" },
        React.createElement(ConfigurationPanelHeader, null),
        parents.length > 0 && React.createElement(ConfigurationCategory, { categoryTitle: filterByText }),
        React.createElement(ParentFiltersList, { currentFilterLocalId: currentFilter.attributeFilter.localIdentifier, parents: parents, setParents: onParentSelect, onConnectingAttributeChanged: onConnectingAttributeChanged, connectingAttributes: connectingAttributes, attributes: attributes }),
        showDisplayFormPicker && (React.createElement("div", { className: "s-display-form-configuration" },
            React.createElement(ConfigurationCategory, { categoryTitle: displayValuesAsText }),
            React.createElement("div", { className: "configuration-panel-body" },
                React.createElement(AttributeDisplayFormsDropdown, { displayForms: filterDisplayForms.availableDisplayForms, selectedDisplayForm: filterDisplayForms.selectedDisplayForm, onChange: onDisplayFormSelect }))))));
};
//# sourceMappingURL=AttributeFilterConfiguration.js.map