import { __assign, __read } from "tslib";
// (C) 2021-2022 GoodData Corporation
import React, { useCallback, useMemo, useState } from "react";
import { useIntl } from "react-intl";
import { AttributeFilterButton, AttributeFilterDropdownButton, AttributeFilterElementsSelect, } from "@gooddata/sdk-ui-filters";
import { attributeFilterToDashboardAttributeFilter, dashboardAttributeFilterToAttributeFilter, } from "../../../_staging/dashboard/dashboardFilterConverter";
import { useParentFilters } from "./useParentFilters";
import { filterObjRef } from "@gooddata/sdk-model";
import { AttributeFilterConfiguration } from "./dashboardDropdownBody/configuration/AttributeFilterConfiguration";
import { CustomAttributeFilterDropdownActions, CustomConfigureAttributeFilterDropdownActions, } from "./CustomDropdownActions";
import { removeAttributeFilter, useDashboardDispatch, selectLocale, useDashboardSelector, } from "../../../model";
import { AttributeFilterParentFilteringProvider, useAttributeFilterParentFiltering, } from "./AttributeFilterParentFilteringContext";
import { useMediaQuery } from "@gooddata/sdk-ui-kit";
/**
 * Default implementation of the attribute filter to use on the dashboard's filter bar.
 *
 * This will use the SDK's AttributeFilter with the button styled same as we have it today on KD.
 *
 * @alpha
 */
export var DefaultDashboardAttributeFilter = function (props) {
    var filter = props.filter, onFilterChanged = props.onFilterChanged, isDraggable = props.isDraggable;
    var _a = useParentFilters(filter), parentFilters = _a.parentFilters, parentFilterOverAttribute = _a.parentFilterOverAttribute;
    var locale = useDashboardSelector(selectLocale);
    var attributeFilter = useMemo(function () { return dashboardAttributeFilterToAttributeFilter(filter); }, [filter]);
    var _b = __read(useState(false), 2), isConfigurationOpen = _b[0], setIsConfigurationOpen = _b[1];
    var filterRef = useMemo(function () {
        return filterObjRef(attributeFilter);
    }, [attributeFilter]);
    var dispatch = useDashboardDispatch();
    var handleRemoveAttributeFilter = useCallback(function () { return dispatch(removeAttributeFilter(filter.attributeFilter.localIdentifier)); }, [filter, dispatch]);
    var intl = useIntl();
    var cancelText = intl.formatMessage({ id: "gs.list.cancel" });
    var saveText = intl.formatMessage({ id: "attributesDropdown.save" });
    var applyText = intl.formatMessage({ id: "gs.list.apply" });
    var displayValuesAsText = intl.formatMessage({ id: "attributesDropdown.displayValuesAs" });
    var filterByText = intl.formatMessage({ id: "attributesDropdown.filterBy" });
    var CustomDropdownButton = useMemo(function () {
        return function DropdownButton(props) {
            var isOpen = props.isOpen;
            var isMobile = useMediaQuery("mobileDevice");
            var buttonSpacing = isDraggable
                ? { margin: "7px 11px 7px -10px" }
                : { margin: "7px 11px 7px 0" };
            if (isOpen && isMobile) {
                buttonSpacing = {};
            }
            return (React.createElement("div", { style: buttonSpacing },
                React.createElement(AttributeFilterDropdownButton, __assign({}, props, { isDraggable: isDraggable }))));
        };
    }, [isDraggable]);
    var CustomDropdownActions = useMemo(function () {
        return function DropdownActions(props) {
            var _a = useAttributeFilterParentFiltering(), onConfigurationSave = _a.onConfigurationSave, configurationChanged = _a.configurationChanged, displayFormChanged = _a.displayFormChanged, onConfigurationClose = _a.onConfigurationClose;
            return (React.createElement(React.Fragment, null, isConfigurationOpen ? (React.createElement(CustomConfigureAttributeFilterDropdownActions, { isSaveDisabled: !(configurationChanged || displayFormChanged), onSaveButtonClick: function () {
                    onConfigurationSave();
                    setIsConfigurationOpen(false);
                }, onCancelButtonClick: function () {
                    setIsConfigurationOpen(false);
                }, cancelText: cancelText, saveText: saveText })) : (React.createElement(CustomAttributeFilterDropdownActions, __assign({}, props, { applyText: applyText, cancelText: cancelText, onConfigurationButtonClick: function () {
                    setIsConfigurationOpen(true);
                    onConfigurationClose();
                }, onDeleteButtonClick: function () {
                    handleRemoveAttributeFilter();
                } })))));
        };
    }, [isConfigurationOpen, cancelText, saveText, applyText, handleRemoveAttributeFilter]);
    var CustomElementsSelect = useMemo(function () {
        return function ElementsSelect(props) {
            var closeHandler = useCallback(function () {
                setIsConfigurationOpen(false);
            }, []);
            return (React.createElement(React.Fragment, null, isConfigurationOpen ? (React.createElement(AttributeFilterConfiguration, { closeHandler: closeHandler, filterRef: filterRef, onChange: function () { }, filterByText: filterByText, displayValuesAsText: displayValuesAsText })) : (React.createElement(AttributeFilterElementsSelect, __assign({}, props)))));
        };
    }, [isConfigurationOpen, filterRef, filterByText, displayValuesAsText]);
    return (React.createElement(AttributeFilterParentFilteringProvider, { filter: filter },
        React.createElement(AttributeFilterButton, { filter: attributeFilter, onApply: function (newFilter) {
                onFilterChanged(attributeFilterToDashboardAttributeFilter(newFilter, filter.attributeFilter.localIdentifier));
            }, parentFilters: parentFilters, parentFilterOverAttribute: parentFilterOverAttribute, locale: locale, DropdownButtonComponent: CustomDropdownButton, DropdownActionsComponent: CustomDropdownActions, ElementsSelectComponent: CustomElementsSelect, fullscreenOnMobile: true })));
};
//# sourceMappingURL=DefaultDashboardAttributeFilter.js.map