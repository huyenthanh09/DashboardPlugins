// (C) 2022 GoodData Corporation
import React, { useContext, useMemo, useCallback } from "react";
import { filterObjRef } from "@gooddata/sdk-model";
import { selectOtherContextAttributeFilters, useDashboardSelector } from "../../../model";
import { dashboardAttributeFilterToAttributeFilter } from "../../../_staging/dashboard/dashboardFilterConverter";
import { useParentsConfiguration } from "./dashboardDropdownBody/configuration/hooks/useParentsConfiguration";
import { useDisplayFormConfiguration } from "./dashboardDropdownBody/configuration/hooks/useDisplayFormConfiguration";
export var AttributeFilterParentFiltering = React.createContext(null); // TODO: Fix typing
AttributeFilterParentFiltering.displayName = "AttributeFilterParentFiltering";
/**
 * @internal
 */
export var useAttributeFilterParentFiltering = function () {
    return useContext(AttributeFilterParentFiltering);
};
/**
 * @internal
 */
export var AttributeFilterParentFilteringProvider = function (props) {
    var children = props.children, currentFilter = props.filter;
    var attributeFilter = useMemo(function () { return dashboardAttributeFilterToAttributeFilter(currentFilter); }, [currentFilter]);
    var filterRef = useMemo(function () {
        return filterObjRef(attributeFilter);
    }, [attributeFilter]);
    var neighborFilters = useDashboardSelector(selectOtherContextAttributeFilters(filterRef));
    var _a = useParentsConfiguration(neighborFilters, currentFilter), parents = _a.parents, configurationChanged = _a.configurationChanged, onParentSelect = _a.onParentSelect, onConnectingAttributeChanged = _a.onConnectingAttributeChanged, onParentFiltersChange = _a.onParentFiltersChange, onConfigurationClose = _a.onConfigurationClose;
    var _b = useDisplayFormConfiguration(currentFilter), onDisplayFormSelect = _b.onDisplayFormSelect, filterDisplayForms = _b.filterDisplayForms, displayFormChanged = _b.displayFormChanged, onDisplayFormChange = _b.onDisplayFormChange;
    var onConfigurationSave = useCallback(function () {
        onParentFiltersChange();
        onDisplayFormChange();
    }, [onParentFiltersChange, onDisplayFormChange]);
    var showDisplayFormPicker = filterDisplayForms.availableDisplayForms.length > 1;
    return (React.createElement(AttributeFilterParentFiltering.Provider, { value: {
            parents: parents,
            onParentSelect: onParentSelect,
            onConnectingAttributeChanged: onConnectingAttributeChanged,
            onParentFiltersChange: onParentFiltersChange,
            onDisplayFormSelect: onDisplayFormSelect,
            filterDisplayForms: filterDisplayForms,
            displayFormChanged: displayFormChanged,
            onDisplayFormChange: onDisplayFormChange,
            onConfigurationSave: onConfigurationSave,
            onConfigurationClose: onConfigurationClose,
            showDisplayFormPicker: showDisplayFormPicker,
            configurationChanged: configurationChanged,
        } }, children));
};
//# sourceMappingURL=AttributeFilterParentFilteringContext.js.map