// (C) 2022 GoodData Corporation
import { __read } from "tslib";
import { useEffect, useRef } from "react";
import { useDashboardDrop } from "../../../dragAndDrop";
export function useFilterExpansionByDragAndDrop(containsMultipleRows, isFilterBarExpanded, setFilterBarExpanded) {
    var lastCanDrop = useRef(false);
    var lastMultiRows = useRef(false);
    var shouldBeExpandedAfterDrop = useRef(false);
    var _a = __read(useDashboardDrop(["attributeFilter", "attributeFilter-placeholder"], {
        drop: function (_, monitor) {
            if (monitor.didDrop()) {
                shouldBeExpandedAfterDrop.current = true;
            }
        },
    }, []), 2), canDrop = _a[0].canDrop, dropRef = _a[1];
    useEffect(function () {
        var dragStateChanged = canDrop === lastCanDrop.current;
        var multiRowsChanged = containsMultipleRows === lastMultiRows.current;
        if (dragStateChanged || multiRowsChanged) {
            return;
        }
        if (canDrop && containsMultipleRows) {
            shouldBeExpandedAfterDrop.current = isFilterBarExpanded;
            setFilterBarExpanded(true);
        }
        else if (shouldBeExpandedAfterDrop.current !== isFilterBarExpanded) {
            setFilterBarExpanded(shouldBeExpandedAfterDrop.current);
            shouldBeExpandedAfterDrop.current = false;
        }
        lastCanDrop.current = canDrop;
        lastMultiRows.current = containsMultipleRows;
    }, [canDrop, containsMultipleRows, isFilterBarExpanded, setFilterBarExpanded]);
    return dropRef;
}
//# sourceMappingURL=useFilterExpansionByDragAndDrop.js.map