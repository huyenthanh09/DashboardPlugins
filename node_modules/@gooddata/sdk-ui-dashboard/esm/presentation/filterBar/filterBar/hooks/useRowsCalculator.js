import { __read, __spread } from "tslib";
// (C) 2021-2022 GoodData Corporation
import { useCallback } from "react";
export var CalculatedRowsDefault = { expandedHeight: 0, collapsedHeight: 0, rows: [] };
export function useRowsCalculator(element) {
    return useCallback(function (dimensions) {
        var current = element.current;
        //no data yet
        if (!current || !dimensions.bounds) {
            return CalculatedRowsDefault;
        }
        var height = dimensions.bounds.height;
        var determinedRows = determineRows(current);
        var rows = createRows(determinedRows);
        return { expandedHeight: height, collapsedHeight: rows[0], rows: rows };
    }, [element]);
}
function determineRows(element) {
    var children = Array.prototype.slice.call(element.childNodes);
    var last = Number.MIN_SAFE_INTEGER;
    return children.reduce(function (rows, item) {
        var hasWidth = Boolean(item.offsetWidth);
        //NOTE: If element has no width, it can not basically affect row break
        // so we can skip it here
        if (hasWidth) {
            var lastRow = rows[rows.length - 1];
            if (item.offsetLeft <= last) {
                rows.push([item]);
            }
            else {
                lastRow.push(item);
            }
            last = item.offsetLeft;
        }
        return rows;
    }, [[]]);
}
function createRows(determinedRows) {
    return determinedRows.map(function (row) {
        var itemsHeight = row.map(function (item) { var _a; return (_a = item.offsetHeight) !== null && _a !== void 0 ? _a : 0; });
        return Math.max.apply(Math, __spread(itemsHeight));
    });
}
//# sourceMappingURL=useRowsCalculator.js.map