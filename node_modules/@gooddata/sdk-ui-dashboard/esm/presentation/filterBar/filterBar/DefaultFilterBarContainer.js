// (C) 2021-2022 GoodData Corporation
import React, { useRef } from "react";
import Measure from "react-measure";
import cx from "classnames";
import { IntlWrapper } from "../../localization";
import { selectLocale, useDashboardSelector } from "../../../model";
import { BulletsBar } from "../../dragAndDrop";
import { ShowAllFiltersButton } from "./ShowAllFiltersButton";
import { useRowsCalculator } from "./hooks/useRowsCalculator";
import { useFilterBarState } from "./hooks/useFilterBarState";
import { useFilterExpansionByDragAndDrop } from "./hooks/useFilterExpansionByDragAndDrop";
var DefaultFilterBarContainerCore = function (_a) {
    var children = _a.children;
    var _b = useFilterBarState(), rows = _b.rows, height = _b.height, isFilterBarExpanded = _b.isFilterBarExpanded, scrollable = _b.scrollable, setFilterBarExpanded = _b.setFilterBarExpanded, setCalculatedRows = _b.setCalculatedRows;
    var dropRef = useFilterExpansionByDragAndDrop(rows.length > 1, isFilterBarExpanded, setFilterBarExpanded);
    return (React.createElement("div", { className: "dash-filters-wrapper s-gd-dashboard-filter-bar", ref: dropRef },
        React.createElement("div", { style: { height: height }, className: cx("dash-filters-visible", {
                scrollable: scrollable,
                "s-dash-filters-visible-all": isFilterBarExpanded,
            }) },
            React.createElement(AllFiltersContainer, { setCalculatedRows: setCalculatedRows }, children),
            React.createElement(FiltersRows, { rows: rows })),
        React.createElement(ShowAllFiltersButton, { isFilterBarExpanded: isFilterBarExpanded, isVisible: rows.length > 1, onToggle: function (isExpanded) { return setFilterBarExpanded(isExpanded); } }),
        React.createElement(BulletsBar, null)));
};
var AllFiltersContainer = function (_a) {
    var setCalculatedRows = _a.setCalculatedRows, children = _a.children;
    var ref = useRef(null);
    var rowCalculator = useRowsCalculator(ref);
    return (React.createElement(Measure, { bounds: true, innerRef: function (rf) { return (ref.current = rf); }, onResize: function (dimensions) { return setCalculatedRows(rowCalculator(dimensions)); } }, function (_a) {
        var measureRef = _a.measureRef;
        return (React.createElement("div", { className: "dash-filters-all", ref: measureRef }, children));
    }));
};
var FiltersRows = function (_a) {
    var rows = _a.rows;
    return (React.createElement(React.Fragment, null, rows.length > 1 && (React.createElement("div", { className: "dash-filters-rows" }, rows.map(function (height, index) { return (React.createElement("div", { className: "dash-filters-row", style: { height: height }, key: index })); })))));
};
/**
 * @internal
 */
export var DefaultFilterBarContainer = function (_a) {
    var children = _a.children;
    var locale = useDashboardSelector(selectLocale);
    return (React.createElement(IntlWrapper, { locale: locale },
        React.createElement(DefaultFilterBarContainerCore, null, children)));
};
//# sourceMappingURL=DefaultFilterBarContainer.js.map