// (C) 2021-2022 GoodData Corporation
import { __assign, __read } from "tslib";
import { useCallback, useMemo, useState } from "react";
import partition from "lodash/partition";
import { areObjRefsEqual, isDashboardDateFilter, } from "@gooddata/sdk-model";
import { addAttributeFilter as addAttributeFilterAction, dispatchAndWaitFor, selectSelectedFilterIndex, uiActions, useDashboardDispatch, useDashboardSelector, } from "../../../model";
/**
 * @internal
 */
export function isFilterBarAttributeFilterPlaceholder(object) {
    return object.type === "attributeFilterPlaceholder";
}
/**
 * @internal
 */
export function useFiltersWithAddedPlaceholder(filters) {
    var dispatch = useDashboardDispatch();
    var selectedFilterIndex = useDashboardSelector(selectSelectedFilterIndex);
    var _a = __read(partition(filters, isDashboardDateFilter), 2), _b = __read(_a[0], 1), dateFilter = _b[0], attributeFilters = _a[1];
    var _c = __read(useState(), 2), selectedDisplayForm = _c[0], setSelectedDisplayForm = _c[1];
    var addedAttributeFilter = useMemo(function () {
        if (selectedFilterIndex !== undefined) {
            if (selectedDisplayForm) {
                return __assign(__assign({}, {
                    type: "attributeFilterPlaceholder",
                    filterIndex: selectedFilterIndex,
                }), { selectedDisplayForm: selectedDisplayForm });
            }
            return { type: "attributeFilterPlaceholder", filterIndex: selectedFilterIndex };
        }
        return undefined;
    }, [selectedFilterIndex, selectedDisplayForm]);
    var addAttributeFilterPlaceholder = useCallback(function (index) {
        dispatch(uiActions.selectFilterIndex(index));
    }, [dispatch]);
    var clearAddedFilter = useCallback(function () {
        setSelectedDisplayForm(undefined);
        dispatch(uiActions.clearFilterIndexSelection());
    }, [dispatch]);
    var closeAttributeSelection = useCallback(function () {
        // close after select attribute should not clear placeholder
        if (selectedDisplayForm) {
            return;
        }
        clearAddedFilter();
    }, [selectedDisplayForm, clearAddedFilter]);
    var attributeFiltersWithPlaceholder = useMemo(function () {
        var filterObjects = attributeFilters.map(function (filter, filterIndex) { return ({
            filter: filter,
            filterIndex: filterIndex,
        }); });
        var containsAddedAttributeDisplayForm = selectedDisplayForm &&
            attributeFilters.some(function (attributeFilter) {
                return areObjRefsEqual(attributeFilter.attributeFilter.displayForm, selectedDisplayForm);
            });
        if (addedAttributeFilter === undefined || containsAddedAttributeDisplayForm) {
            return filterObjects;
        }
        filterObjects.splice(addedAttributeFilter.filterIndex, 0, addedAttributeFilter);
        return filterObjects;
    }, [addedAttributeFilter, attributeFilters, selectedDisplayForm]);
    var selectAttributeFilter = useCallback(function (displayForm) {
        if (!addedAttributeFilter) {
            return;
        }
        setSelectedDisplayForm(displayForm);
        dispatchAndWaitFor(dispatch, addAttributeFilterAction(displayForm, addedAttributeFilter.filterIndex)).finally(clearAddedFilter);
    }, [addedAttributeFilter, clearAddedFilter, dispatch]);
    return [
        {
            dateFilter: dateFilter,
            attributeFiltersWithPlaceholder: attributeFiltersWithPlaceholder,
            attributeFiltersCount: attributeFilters.length,
        },
        { addAttributeFilterPlaceholder: addAttributeFilterPlaceholder, selectAttributeFilter: selectAttributeFilter, closeAttributeSelection: closeAttributeSelection },
    ];
}
//# sourceMappingURL=useFiltersWithAddedPlaceholder.js.map