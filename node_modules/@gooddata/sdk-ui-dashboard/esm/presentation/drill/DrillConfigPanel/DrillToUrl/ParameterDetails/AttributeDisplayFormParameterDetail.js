import { __awaiter, __generator, __read } from "tslib";
// (C) 2020-2022 GoodData Corporation
import React, { useState, useEffect } from "react";
import { defineMessages, useIntl } from "react-intl";
import { LRUCache } from "@gooddata/util";
import { objRefToString } from "@gooddata/sdk-model";
import { ParameterDetail } from "./ParameterDetail";
import { AttributeDisplayFormType } from "../../../types";
import { emptyHeaderTitleFromIntl, useBackendStrict } from "@gooddata/sdk-ui";
var MAX_CACHED_REQUESTS = 50;
var MAX_URL_LENGTH = 100;
var DISPLAY_FORM_ELEMENTS_LIMIT = 3;
var requestCache = new LRUCache({ maxSize: MAX_CACHED_REQUESTS });
var getDisplayFormLabel = function (type) {
    var messages = defineMessages({
        hyperlink: { id: "configurationPanel.drillIntoUrl.editor.urlDisplayFormTypeLabel" },
        pushpin: { id: "configurationPanel.drillIntoUrl.editor.geoDisplayFormTypeLabel" },
        default: { id: "configurationPanel.drillIntoUrl.editor.defaultDisplayFormTypeLabel" },
    });
    switch (type) {
        case AttributeDisplayFormType.HYPERLINK:
            return messages.hyperlink;
        case AttributeDisplayFormType.GEO_PUSHPIN:
            return messages.pushpin;
        default:
            return messages.default;
    }
};
var handleEmptyValues = function (values, intl) {
    return values.map(function (value) { return (value.length === 0 ? emptyHeaderTitleFromIntl(intl) : value); });
};
var prepareValues = function (elements, type) {
    if (type !== AttributeDisplayFormType.HYPERLINK) {
        return elements.map(function (_a) {
            var title = _a.title;
            return title;
        });
    }
    return elements.map(function (_a) {
        var title = _a.title;
        return title.length > MAX_URL_LENGTH ? title.substr(0, MAX_URL_LENGTH) + "..." : title;
    });
};
function getElements(backend, projectId, displayFormRef, limit) {
    if (limit === void 0) { limit = 5; }
    return backend
        .workspace(projectId)
        .attributes()
        .elements()
        .forDisplayForm(displayFormRef)
        .withLimit(limit)
        .query();
}
var getCachedRequests = function (backend, projectId, displayFormRef) { return __awaiter(void 0, void 0, void 0, function () {
    var cacheKey, cachedResponse, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                cacheKey = objRefToString(displayFormRef);
                cachedResponse = requestCache.get(cacheKey);
                if (cachedResponse) {
                    return [2 /*return*/, cachedResponse];
                }
                return [4 /*yield*/, getElements(backend, projectId, displayFormRef, DISPLAY_FORM_ELEMENTS_LIMIT)];
            case 1:
                response = _a.sent();
                requestCache.set(cacheKey, response);
                return [2 /*return*/, response];
        }
    });
}); };
export var AttributeDisplayFormParameterDetail = function (props) {
    var title = props.title, label = props.label, type = props.type, displayFormRef = props.displayFormRef, projectId = props.projectId, showValues = props.showValues;
    var intl = useIntl();
    var backend = useBackendStrict();
    var _a = __read(useState(true), 2), isLoading = _a[0], setIsLoading = _a[1];
    var _b = __read(useState([]), 2), values = _b[0], setValues = _b[1];
    var _c = __read(useState(0), 2), additionalValues = _c[0], setAdditionalValues = _c[1];
    useEffect(function () {
        var isMounted = true;
        var getValues = function () { return __awaiter(void 0, void 0, void 0, function () {
            var response, additional;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getCachedRequests(backend, projectId, displayFormRef)];
                    case 1:
                        response = _a.sent();
                        if (isMounted) {
                            additional = response.totalCount - DISPLAY_FORM_ELEMENTS_LIMIT;
                            if (additional > 0) {
                                setAdditionalValues(additional);
                            }
                            setValues(handleEmptyValues(prepareValues(response.items, type), intl));
                            setIsLoading(false);
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        if (showValues) {
            getValues();
        }
        else {
            setIsLoading(false);
        }
        return function () {
            isMounted = false;
        };
    }, [displayFormRef, type, intl, projectId, showValues]);
    return (React.createElement(ParameterDetail, { title: title, label: label, typeName: intl.formatMessage(getDisplayFormLabel(type)), isLoading: isLoading, useEllipsis: type !== AttributeDisplayFormType.HYPERLINK, values: values ? values : [], additionalValues: additionalValues }));
};
//# sourceMappingURL=AttributeDisplayFormParameterDetail.js.map