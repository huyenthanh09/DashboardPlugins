import { __assign, __read, __spread } from "tslib";
// (C) 2020-2022 GoodData Corporation
import React, { useState, useMemo } from "react";
import { FormattedMessage, useIntl } from "react-intl";
import { SyntaxHighlightingInput, ConfirmDialogBase, useMediaQuery, FullScreenOverlay, Overlay, } from "@gooddata/sdk-ui-kit";
import { ParametersPanel } from "./CustomUrlEditorParameters";
import { isDrillToCustomUrlConfig } from "../../types";
export var UrlInput = function (props) {
    var onChange = props.onChange, onCursor = props.onCursor, currentUrlValue = props.currentUrlValue, intl = props.intl, syntaxHighlightingRules = props.syntaxHighlightingRules;
    var placeholder = intl.formatMessage({
        id: "configurationPanel.drillIntoUrl.editor.textAreaPlaceholder",
    });
    return (React.createElement(SyntaxHighlightingInput, { onChange: onChange, onCursor: onCursor, value: currentUrlValue, customOptions: { placeholder: placeholder }, className: "gd-input-syntax-highlighting-input", formatting: syntaxHighlightingRules }));
};
var HelpLink = function (_a) {
    var link = _a.link;
    return (React.createElement("a", { className: "gd-button-link gd-drill-to-custom-url-help", target: "_blank", href: link, rel: "noopener noreferrer" },
        React.createElement("span", { className: "gd-icon-circle-question" }),
        React.createElement("span", { className: "gd-button-link-text" },
            React.createElement(FormattedMessage, { id: "configurationPanel.drillIntoUrl.editor.helpButtonLabel" }))));
};
var buildValidDisplayFormsFormattingRule = function (attributeDisplayForms) {
    if (attributeDisplayForms.length === 0) {
        return undefined;
    }
    var validAttributePlaceholders = attributeDisplayForms
        .map(function (displayForm) { return "{attribute_title\\(" + displayForm.id + "\\)}"; })
        .join("|");
    return { regex: new RegExp(validAttributePlaceholders), token: "attribute" };
};
var IDENTIFIER_RULE = {
    regex: /\{workspace_id\}|\{project_id\}|\{insight_id\}|\{widget_id\}|\{dashboard_id\}|\{client_id\}|\{data_product_id\}/,
    token: "identifier",
};
var INVALID_IDENTIFIER_RULE = { regex: /\{[^}{]*\}/, token: "invalid-identifier" };
var INVALID_DISPLAY_FORMS_RULE = {
    regex: /\{attribute_title\(.*?\)\}/,
    token: "invalid-attribute",
};
var DEFAULT_RULES = [
    INVALID_DISPLAY_FORMS_RULE,
    IDENTIFIER_RULE,
    INVALID_IDENTIFIER_RULE,
];
var buildFormattingRules = function (attributeDisplayForms) {
    var validDisplayFormsRule = buildValidDisplayFormsFormattingRule(attributeDisplayForms);
    return {
        start: validDisplayFormsRule ? __spread([validDisplayFormsRule], DEFAULT_RULES) : DEFAULT_RULES,
    };
};
var UrlInputPanel = function (props) {
    var currentUrlValue = props.currentUrlValue, onChange = props.onChange, onCursor = props.onCursor, documentationLink = props.documentationLink, attributeDisplayForms = props.attributeDisplayForms, intl = props.intl;
    var syntaxHighlightingRules = useMemo(function () { return attributeDisplayForms && buildFormattingRules(attributeDisplayForms); }, [attributeDisplayForms]);
    return (React.createElement("div", null,
        React.createElement("label", { className: "gd-label" },
            React.createElement(FormattedMessage, { id: "configurationPanel.drillIntoUrl.editor.textAreaLabel" })),
        React.createElement(UrlInput, { onChange: onChange, onCursor: onCursor, currentUrlValue: currentUrlValue, syntaxHighlightingRules: syntaxHighlightingRules, intl: intl }),
        documentationLink && React.createElement(HelpLink, { link: documentationLink })));
};
var initialCursorPosition = {
    from: 0,
    to: 0,
};
var insertPlaceholderAtCursor = function (text, placeholder, cursor) {
    return "" + text.substring(0, cursor.from) + placeholder + text.substring(cursor.to);
};
var assertValidUrl = function (url) {
    return /^[A-Za-z0-9.\-+]+:|^\{attribute_title\(/.test(url) ? url : "https://" + url;
};
var getWarningTextForInvalidParameters = function (parameters) {
    var invalidParameters = parameters.map(function (parameter) { return "\"" + parameter + "\""; }).join(", ");
    return (React.createElement(FormattedMessage, { id: "configurationPanel.drillIntoUrl.editor.invalidAttributeDisplayForms", values: { invalidParameters: invalidParameters } }));
};
var CustomUrlEditorDialog = function (props) {
    var urlDrillTarget = props.urlDrillTarget, documentationLink = props.documentationLink, onSelect = props.onSelect, onClose = props.onClose, attributeDisplayForms = props.attributeDisplayForms, loadingAttributeDisplayForms = props.loadingAttributeDisplayForms, invalidAttributeDisplayFormIdentifiers = props.invalidAttributeDisplayFormIdentifiers, enableClientIdParameter = props.enableClientIdParameter, enableDataProductIdParameter = props.enableDataProductIdParameter, enableWidgetIdParameter = props.enableWidgetIdParameter;
    var intl = useIntl();
    var previousValue = urlDrillTarget
        ? (isDrillToCustomUrlConfig(urlDrillTarget) && urlDrillTarget.customUrl) || ""
        : "";
    var _a = __read(useState(previousValue), 2), currentValue = _a[0], setCurrentValue = _a[1];
    var apply = function () { return onSelect(assertValidUrl(currentValue)); };
    var handleOnChange = function (value) { return setCurrentValue(value.trim()); };
    var isApplyEnabled = currentValue && currentValue.localeCompare(previousValue) !== 0;
    var _b = __read(useState(initialCursorPosition), 2), cursorPosition = _b[0], setCursorPosition = _b[1];
    var handleCursorPosition = function (from, to) { return setCursorPosition({ from: from, to: to }); };
    var handleOnAdd = function (parameterPlaceholder) {
        return setCurrentValue(insertPlaceholderAtCursor(currentValue, parameterPlaceholder, cursorPosition));
    };
    var editorWarningText = invalidAttributeDisplayFormIdentifiers.length > 0
        ? getWarningTextForInvalidParameters(invalidAttributeDisplayFormIdentifiers)
        : undefined;
    return (React.createElement(ConfirmDialogBase, { className: "gd-drill-custom-url-editor s-gd-drill-custom-url-editor", isPositive: true, headline: intl.formatMessage({
            id: previousValue
                ? "configurationPanel.drillIntoUrl.editor.editUrlTitle"
                : "configurationPanel.drillIntoUrl.editor.addUrlTitle",
        }), cancelButtonText: intl.formatMessage({
            id: "configurationPanel.drillIntoUrl.editor.cancelButtonLabel",
        }), submitButtonText: intl.formatMessage({
            id: "configurationPanel.drillIntoUrl.editor.applyButtonLabel",
        }), isSubmitDisabled: !isApplyEnabled, submitOnEnterKey: false, onCancel: onClose, onSubmit: apply, warning: editorWarningText },
        React.createElement(UrlInputPanel, { onChange: handleOnChange, onCursor: handleCursorPosition, documentationLink: documentationLink, currentUrlValue: currentValue, attributeDisplayForms: attributeDisplayForms, intl: intl }),
        React.createElement(ParametersPanel, { attributeDisplayForms: attributeDisplayForms, loadingAttributeDisplayForms: loadingAttributeDisplayForms, enableClientIdParameter: enableClientIdParameter, enableDataProductIdParameter: enableDataProductIdParameter, enableWidgetIdParameter: enableWidgetIdParameter, onAdd: handleOnAdd, intl: intl })));
};
export var CustomUrlEditor = function (props) {
    var isMobileDevice = useMediaQuery("mobileDevice");
    var SelectedOverlay = isMobileDevice ? FullScreenOverlay : Overlay;
    return (React.createElement(SelectedOverlay, { onClose: props.onClose, isModal: true, closeOnOutsideClick: false, closeOnEscape: true, positionType: "fixed", className: "gd-modal-overlay" },
        React.createElement(CustomUrlEditorDialog, __assign({}, props))));
};
//# sourceMappingURL=CustomUrlEditor.js.map