// (C) 2020-2022 GoodData Corporation
import React from "react";
import { FormattedMessage, useIntl } from "react-intl";
import { DropdownSectionHeader } from "../DropdownSectionHeader";
import { AttributeDisplayFormParameterDetail } from "../ParameterDetails/AttributeDisplayFormParameterDetail";
import { Parameter } from "./Parameter";
import { useWorkspaceStrict } from "@gooddata/sdk-ui";
import { AttributeDisplayFormType } from "../../../types";
import { selectAllCatalogAttributesMap, useDashboardSelector } from "../../../../../model";
var ParameterX = function (_a) {
    var item = _a.item, onAdd = _a.onAdd;
    var x = useDashboardSelector(selectAllCatalogAttributesMap);
    var y = x.get(item.attribute);
    var intl = useIntl();
    var projectId = useWorkspaceStrict();
    return (React.createElement(Parameter, { key: item.id, name: (y === null || y === void 0 ? void 0 : y.attribute.title) || "", description: item.title, detailContent: React.createElement(AttributeDisplayFormParameterDetail, { title: (y === null || y === void 0 ? void 0 : y.attribute.title) || "", label: item.title, type: item.displayFormType, projectId: projectId, displayFormRef: item.ref, showValues: true }), iconClassName: getDisplayFormIcon(item.displayFormType), onAdd: function () { return onAdd("{attribute_title(" + item.id + ")}"); }, intl: intl }));
};
var getDisplayFormIcon = function (type) {
    switch (type) {
        case AttributeDisplayFormType.HYPERLINK:
            return "gd-icon-hyperlink-warning";
        case AttributeDisplayFormType.GEO_PUSHPIN:
            return "gd-icon-earth";
        default:
            return "gd-icon-label-warning";
    }
};
export var InsightParametersSection = function (_a) {
    var attributeDisplayForms = _a.attributeDisplayForms, loadingAttributeDisplayForms = _a.loadingAttributeDisplayForms, onAdd = _a.onAdd;
    return (React.createElement(React.Fragment, null, ((attributeDisplayForms && attributeDisplayForms.length > 0) ||
        loadingAttributeDisplayForms) && (React.createElement(React.Fragment, null,
        React.createElement(DropdownSectionHeader, null,
            React.createElement(FormattedMessage, { id: "configurationPanel.drillIntoUrl.editor.insightParametersSectionLabel" })),
        loadingAttributeDisplayForms ? (React.createElement("div", { className: "gd-drill-to-url-section-loading s-drill-to-custom-url-attr-section-loading" },
            React.createElement("div", { className: "gd-spinner small" }))) : (attributeDisplayForms === null || attributeDisplayForms === void 0 ? void 0 : attributeDisplayForms.map(function (item) { return (React.createElement(ParameterX, { key: item.id, item: item, onAdd: onAdd })); }))))));
};
//# sourceMappingURL=InsightParametersSection.js.map