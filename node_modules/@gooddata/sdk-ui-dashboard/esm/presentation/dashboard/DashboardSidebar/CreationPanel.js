// (C) 2007-2022 GoodData Corporation
import React, { useMemo } from "react";
import { Typography } from "@gooddata/sdk-ui-kit";
import compact from "lodash/compact";
import sortBy from "lodash/sortBy";
import { FormattedMessage } from "react-intl";
import { DraggableInsightList } from "./DraggableInsightList";
import { selectSupportsKpiWidgetCapability, selectIsAnalyticalDesignerEnabled, useDashboardSelector, selectIsNewDashboard, } from "../../../model";
import { useDashboardComponentsContext } from "../../dashboardContexts";
import cx from "classnames";
export var CreationPanel = function (_a) {
    var className = _a.className;
    var supportsKpis = useDashboardSelector(selectSupportsKpiWidgetCapability);
    var isAnalyticalDesignerEnabled = useDashboardSelector(selectIsAnalyticalDesignerEnabled);
    var isNewDashboard = useDashboardSelector(selectIsNewDashboard);
    var _b = useDashboardComponentsContext(), KpiWidgetComponentSet = _b.KpiWidgetComponentSet, AttributeFilterComponentSet = _b.AttributeFilterComponentSet, InsightWidgetComponentSet = _b.InsightWidgetComponentSet;
    var addItemPanelItems = useMemo(function () {
        var items = compact([
            supportsKpis && KpiWidgetComponentSet.creating,
            AttributeFilterComponentSet.creating,
            InsightWidgetComponentSet.creating,
        ]);
        return sortBy(items, function (item) { var _a; return (_a = item.priority) !== null && _a !== void 0 ? _a : 0; }).map(function (_a) {
            var CreatePanelListItemComponent = _a.CreatePanelListItemComponent, type = _a.type;
            return (React.createElement(CreatePanelListItemComponent, { key: type }));
        });
    }, [AttributeFilterComponentSet, KpiWidgetComponentSet, InsightWidgetComponentSet, supportsKpis]);
    return (React.createElement("div", { className: cx("configuration-panel creation-panel", className) },
        React.createElement("div", { className: "configuration-panel-content" },
            React.createElement(Typography, { tagName: "h2", className: "flex-panel-item-nostretch" },
                React.createElement(FormattedMessage, { id: "visualizationsList.dragToAdd" })),
            React.createElement("div", { className: "configuration-category drag-to-add" },
                React.createElement(Typography, { tagName: "h3" },
                    React.createElement(FormattedMessage, { id: "addPanel.newItem" })),
                React.createElement("div", { className: "add-item-panel" }, addItemPanelItems)),
            isAnalyticalDesignerEnabled && (React.createElement("div", { className: "configuration-category configuration-category-vis drag-to-add flex-panel-item-stretch" },
                React.createElement(Typography, { tagName: "h3" },
                    React.createElement(FormattedMessage, { id: "visualizationsList.savedVisualizations" })),
                React.createElement(DraggableInsightList, { recalculateSizeReference: className, searchAutofocus: !isNewDashboard }))))));
};
//# sourceMappingURL=CreationPanel.js.map