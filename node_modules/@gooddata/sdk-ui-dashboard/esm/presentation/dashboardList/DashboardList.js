import { __assign, __read } from "tslib";
// (C) 2020-2022 GoodData Corporation
import React, { useMemo, useState } from "react";
import { useIntl } from "react-intl";
import { Dropdown, DropdownList } from "@gooddata/sdk-ui-kit";
import { DashboardListItem } from "./DashboardListItem";
import { DashboardListButton } from "./DashboardListButton";
import { dashboardMatch } from "../drill/utils/dashboardPredicate";
var alignPoints = [
    {
        align: "bl tl",
    },
    {
        align: "tl bl",
    },
];
var ITEM_HEIGHT = 25;
var DROPDOWN_BODY_WIDTH = 240;
var DROPDOWN_BODY_HEIGHT = 319;
export var DashboardList = function (_a) {
    var selected = _a.selected, dashboards = _a.dashboards, onSelect = _a.onSelect;
    var selectedDashboard = useMemo(function () {
        return selected && dashboards.find(function (d) { return dashboardMatch(d.identifier, d.ref, selected); });
    }, [selected, dashboards]);
    var intl = useIntl();
    var dropdownLabel = selectedDashboard
        ? selectedDashboard.title
        : intl.formatMessage({
            id: "configurationPanel.drillConfig.selectDashboard",
        });
    var _b = __read(useState(""), 2), searchString = _b[0], setSearchString = _b[1];
    var items = useMemo(function () {
        var items = dashboards.filter(function (_a) {
            var title = _a.title;
            return title === null || title === void 0 ? void 0 : title.toLowerCase().includes(searchString.toLowerCase());
        });
        if (selectedDashboard) {
            items = items.map(function (item) {
                return item.identifier === selectedDashboard.identifier ? __assign(__assign({}, item), { selected: true }) : item;
            });
        }
        return items;
    }, [dashboards, searchString, selectedDashboard]);
    var searchPlaceholder = intl.formatMessage({
        id: "configurationPanel.drillConfig.drillIntoDashboard.searchPlaceholder",
    });
    return (React.createElement(Dropdown, { className: "s-dashboards-dropdown", closeOnParentScroll: true, closeOnMouseDrag: false, closeOnOutsideClick: true, alignPoints: alignPoints, renderBody: function (_a) {
            var closeDropdown = _a.closeDropdown;
            return (React.createElement(DropdownList, { className: "dashboards-dropdown-body s-dashboards-dropdown-body", width: DROPDOWN_BODY_WIDTH, height: DROPDOWN_BODY_HEIGHT, searchString: searchString, searchPlaceholder: searchPlaceholder, itemHeight: ITEM_HEIGHT, showSearch: true, items: items, scrollToItem: selectedDashboard, onSearch: setSearchString, renderItem: function (_a) {
                    var item = _a.item;
                    var isSelected = selectedDashboard && item.selected;
                    return (React.createElement(DashboardListItem, { isSelected: isSelected, title: item.title, onClick: function () {
                            onSelect(item);
                            closeDropdown();
                        }, accessibilityLimitation: item.accessibilityLimitation }));
                } }));
        }, onOpenStateChanged: function () {
            setSearchString("");
        }, renderButton: function (_a) {
            var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
            return (React.createElement(DashboardListButton, { accessibilityLimitation: selectedDashboard === null || selectedDashboard === void 0 ? void 0 : selectedDashboard.accessibilityLimitation, label: dropdownLabel, isOpen: isOpen, toggleDropdown: toggleDropdown }));
        } }));
};
//# sourceMappingURL=DashboardList.js.map