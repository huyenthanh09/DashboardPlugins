import { ComponentType } from "react";
import { IDashboardAttributeFilterProps, IDashboardAttributeFilterPlaceholderProps } from "../filterBar/types";
import { IDashboardInsightProps, IDashboardKpiProps, IDashboardWidgetProps } from "../widget/types";
import { AttributeFilterDraggableItem, CustomDraggableItem, DraggableContentItemType } from "../dragAndDrop/types";
import { AttributeFilterComponentProvider, InsightComponentProvider, KpiComponentProvider, WidgetComponentProvider } from "../dashboardContexts/types";
import { IInsightWidget, IKpiWidget } from "@gooddata/sdk-model";
import { ICustomWidget } from "../../model";
/**
 * @internal
 */
export interface CustomComponentBase<TMainProps, TProviderParams extends any[]> {
    /**
     * The main body of the component that is shown by default in view and edit modes.
     */
    MainComponentProvider: (...params: TProviderParams) => ComponentType<TMainProps>;
}
/**
 * @internal
 */
export interface DraggingComponentProps {
}
/**
 * @internal
 */
export interface DropTargetComponentProps {
}
/**
 * @internal
 */
export declare type IAttributeFilterDraggingComponentProps = {
    itemType: "attributeFilter";
    item: AttributeFilterDraggableItem;
};
/**
 * @internal
 */
export declare type ICustomDraggingComponentProps = {
    itemType: "custom";
    item: CustomDraggableItem;
};
/**
 * @internal
 */
export declare type AttributeFilterDraggingComponent = ComponentType<IAttributeFilterDraggingComponentProps>;
/**
 * @internal
 */
export declare type CustomDraggingComponent = ComponentType<ICustomDraggingComponentProps>;
/**
 * @internal
 */
export declare type AttributeFilterDraggableComponent = {
    DraggingComponent: AttributeFilterDraggingComponent;
    type: "attributeFilter";
};
/**
 * @internal
 */
export declare type InsightDraggableComponent = {
    DraggingComponent?: undefined;
    type: "insight";
};
/**
 * @internal
 */
export declare type KpiDraggableComponent = {
    DraggingComponent?: undefined;
    type: "kpi";
};
/**
 * @internal
 */
export declare type CustomDraggableComponent = {
    DraggingComponent: CustomDraggingComponent;
    type: "custom";
};
/**
 * Capability saying the component can be dragged somewhere.
 * @internal
 */
export declare type DraggableComponent = {
    dragging: AttributeFilterDraggableComponent | KpiDraggableComponent | InsightDraggableComponent | CustomDraggableComponent;
};
/**
 * Capability saying the component can receive draggable items.
 * @internal
 */
export declare type DropTarget = {
    dropping: {
        /**
         * Component shown when item is dragged onto component.
         */
        DropTargetComponent: ComponentType<DropTargetComponentProps>;
    };
};
/**
 * @internal
 */
export interface ICreatePanelItemComponentProps {
    disabled?: boolean;
}
/**
 * @internal
 */
export declare type CustomCreatePanelItemComponent = ComponentType<ICreatePanelItemComponentProps>;
/**
 * Capability saying the component can be created by dragging it from the side drawer.
 * @internal
 */
export declare type CreatableByDragComponent = DraggableComponent & {
    creating: {
        /**
         * Component used to render the item in the left drawer menu used to create a new instance of this component on the dashboard
         */
        CreatePanelListItemComponent: CustomCreatePanelItemComponent;
        /**
         * The lower the priority, the earlier the component is shown in the drawer.
         *
         * @remarks
         * For example item with priority 0 is shown before item with priority 5
         */
        priority?: number;
        /**
         * Draggable item type for the creating item.
         */
        type: DraggableContentItemType;
    };
};
/**
 * Capability saying the component displays something else than the Main component while it is being configured for the first time after being created.
 * @internal
 */
export declare type CreatablePlaceholderComponent<TProps> = {
    creating: {
        /**
         * Component used to render the item before the initial configuration is done.
         */
        CreatingPlaceholderComponent: ComponentType<TProps>;
    };
};
/**
 * @internal
 */
export declare type CustomWidgetConfigPanelComponent<TWidget> = ComponentType<WidgetConfigPanelProps<TWidget>>;
/**
 * @internal
 */
export interface WidgetConfigPanelProps<TWidget> {
    widget: TWidget;
}
/**
 * Capability saying the component can be configured in edit mode.
 * @internal
 */
export declare type ConfigurableWidget<TWidget> = {
    configuration: {
        /**
         * Component used to render the insides of the configuration panel.
         */
        WidgetConfigPanelComponent: CustomWidgetConfigPanelComponent<TWidget>;
    };
};
/**
 * Definition of attribute filter components
 * @internal
 */
export declare type AttributeFilterComponentSet = CustomComponentBase<IDashboardAttributeFilterProps, Parameters<AttributeFilterComponentProvider>> & DraggableComponent & CreatablePlaceholderComponent<IDashboardAttributeFilterPlaceholderProps> & CreatableByDragComponent;
/**
 * Definition of KPI widget
 * @internal
 */
export declare type KpiWidgetComponentSet = CustomComponentBase<IDashboardKpiProps, Parameters<KpiComponentProvider>> & DraggableComponent & CreatableByDragComponent & CreatablePlaceholderComponent<IDashboardWidgetProps> & ConfigurableWidget<IKpiWidget>;
/**
 * Definition of Insight widget
 * @internal
 */
export declare type InsightWidgetComponentSet = CustomComponentBase<IDashboardInsightProps, Parameters<InsightComponentProvider>> & DraggableComponent & Partial<CreatableByDragComponent> & Partial<CreatablePlaceholderComponent<IDashboardWidgetProps>> & ConfigurableWidget<IInsightWidget>;
/**
 * Definition of widget
 * @internal
 */
export declare type CustomWidgetComponentSet = CustomComponentBase<IDashboardWidgetProps, Parameters<WidgetComponentProvider>> & DraggableComponent & Partial<ConfigurableWidget<ICustomWidget>> & Partial<CreatableByDragComponent>;
/**
 * @internal
 */
export declare type InsightComponentSetProvider = (defaultComponentSet: InsightWidgetComponentSet) => InsightWidgetComponentSet;
//# sourceMappingURL=types.d.ts.map