// (C) 2019-2022 GoodData Corporation
import { __read, __spread } from "tslib";
import { isDashboardWidget, isInsight, isKpi, isKpiWidget, isKpiWithoutComparison, widgetType, } from "@gooddata/sdk-model";
import { fluidLayoutDescriptor, getInsightSizeInfo, INSIGHT_WIDGET_SIZE_INFO_DEFAULT, INSIGHT_WIDGET_SIZE_INFO_DEFAULT_LEGACY, KPI_WIDGET_SIZE_INFO_DEFAULT, KPI_WIDGET_SIZE_INFO_DEFAULT_LEGACY, } from "@gooddata/sdk-ui-ext";
import { KPI_WITHOUT_COMPARISON_SIZE_INFO, KPI_WITH_COMPARISON_SIZE_INFO } from "./constants";
/**
 * @internal
 */
export function getSizeInfo(settings, widgetType, widgetContent) {
    if (widgetType === "kpi") {
        return getKpiSizeInfo(settings, widgetContent);
    }
    return getVisualizationSizeInfo(settings, widgetContent);
}
/**
 * @internal
 */
export function getInsightPlaceholderSizeInfo(settings) {
    return getVisualizationSizeInfo(settings);
}
function getVisualizationSizeInfo(settings, insight) {
    var sizeInfo;
    if (isInsight(insight)) {
        sizeInfo = getInsightSizeInfo(insight, settings);
    }
    if (!sizeInfo) {
        if (!settings.enableKDWidgetCustomHeight) {
            return INSIGHT_WIDGET_SIZE_INFO_DEFAULT_LEGACY;
        }
        return INSIGHT_WIDGET_SIZE_INFO_DEFAULT;
    }
    return sizeInfo;
}
function getKpiSizeInfo(settings, kpi) {
    if (!settings.enableKDWidgetCustomHeight) {
        return KPI_WIDGET_SIZE_INFO_DEFAULT_LEGACY;
    }
    if (!isKpi(kpi)) {
        return KPI_WIDGET_SIZE_INFO_DEFAULT;
    }
    return isKpiWithoutComparison(kpi) ? KPI_WITHOUT_COMPARISON_SIZE_INFO : KPI_WITH_COMPARISON_SIZE_INFO;
}
/**
 * @internal
 */
export function getDashboardLayoutWidgetDefaultHeight(settings, widgetType, widgetContent) {
    var sizeInfo = getSizeInfo(settings, widgetType, widgetContent);
    return fluidLayoutDescriptor.toHeightInPx(sizeInfo.height.default);
}
/**
 * @internal
 */
export function getDashboardLayoutWidgetMinGridHeight(settings, widgetType, widgetContent) {
    var sizeInfo = getSizeInfo(settings, widgetType, widgetContent);
    return sizeInfo.height.min;
}
/**
 * @internal
 */
export function getDashboardLayoutWidgetMaxGridHeight(settings, widgetType, widgetContent) {
    var sizeInfo = getSizeInfo(settings, widgetType, widgetContent);
    return sizeInfo.height.max;
}
/**
 * @internal
 */
export function getMinHeight(widgets, insightMap) {
    var mins = widgets
        .filter(isDashboardWidget)
        .map(function (widget) {
        return getDashboardLayoutWidgetMinGridHeight({ enableKDWidgetCustomHeight: true }, widgetType(widget), isKpiWidget(widget) ? widget.kpi : insightMap.get(widget.insight));
    });
    return Math.max.apply(Math, __spread(mins));
}
/**
 * @internal
 */
export function getMaxHeight(widgets, insightMap) {
    var maxs = widgets
        .filter(isDashboardWidget)
        .map(function (widget) {
        return getDashboardLayoutWidgetMaxGridHeight({ enableKDWidgetCustomHeight: true }, widgetType(widget), isKpiWidget(widget) ? widget.kpi : insightMap.get(widget.insight));
    });
    return Math.min.apply(Math, __spread(maxs));
}
/**
 * @internal
 */
export function getDashboardLayoutWidgetMinGridWidth(settings, widgetType, widgetContent) {
    var sizeInfo = getSizeInfo(settings, widgetType, widgetContent);
    return sizeInfo.width.min;
}
/**
 * @internal
 */
export function getMinWidth(widget, insightMap) {
    return getDashboardLayoutWidgetMinGridWidth({ enableKDWidgetCustomHeight: true }, widgetType(widget), isKpiWidget(widget) ? widget.kpi : insightMap.get(widget.insight));
}
//# sourceMappingURL=sizing.js.map