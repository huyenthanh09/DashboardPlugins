// (C) 2022 GoodData Corporation
import { __assign } from "tslib";
import { insightRef, insightTitle, } from "@gooddata/sdk-model";
import identity from "lodash/identity";
/**
 * Creates a new insightWidget with specified identifier and title and with optional modifications.
 *
 * @param insight - the insight object to create widget for.
 * @param modifications - optional modifications
 *
 * @internal
 */
export function newInsightWidget(insight, modifications) {
    if (modifications === void 0) { modifications = identity; }
    var ref = insightRef(insight);
    var title = insightTitle(insight);
    var builder = new InsightWidgetBuilder(ref, title);
    return modifications(builder).build();
}
/**
 * Builder for a {@link @gooddata/sdk-model#IInsightWidgetBase} object.
 *
 * @remarks
 * The builder without any modifications returns a widget with all mandatory data. To apply
 * additional information use builder functions.
 *
 * @internal
 */
var InsightWidgetBuilder = /** @class */ (function () {
    function InsightWidgetBuilder(insightRef, title) {
        this.widget = {
            insight: { uri: "" },
            type: "insight",
            ignoreDashboardFilters: [],
            drills: [],
            title: "",
            description: "",
            configuration: { hideTitle: false },
            properties: {},
        };
        this.widget.insight = insightRef;
        this.widget.title = title;
    }
    InsightWidgetBuilder.prototype.withIgnoreDashboardFilters = function (ignoreDashboardFilters) {
        this.widget.ignoreDashboardFilters = ignoreDashboardFilters;
        return this;
    };
    InsightWidgetBuilder.prototype.withDrills = function (drills) {
        this.widget.drills = drills;
        return this;
    };
    InsightWidgetBuilder.prototype.withTitle = function (title) {
        this.widget.title = title;
        return this;
    };
    InsightWidgetBuilder.prototype.withDescription = function (description) {
        this.widget.description = description;
        return this;
    };
    InsightWidgetBuilder.prototype.withConfiguration = function (configuration) {
        this.widget.configuration = configuration;
        return this;
    };
    InsightWidgetBuilder.prototype.withProperties = function (properties) {
        this.widget.properties = properties;
        return this;
    };
    InsightWidgetBuilder.prototype.build = function () {
        return __assign({}, this.widget);
    };
    return InsightWidgetBuilder;
}());
export { InsightWidgetBuilder };
//# sourceMappingURL=InsightWidgetBuilder.js.map