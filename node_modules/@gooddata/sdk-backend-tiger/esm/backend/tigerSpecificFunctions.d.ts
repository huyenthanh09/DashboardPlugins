import { JsonApiOrganizationOutMetaPermissionsEnum, GenerateLdmRequest, DeclarativeModel, DeclarativePdm, JsonApiDataSourceInDocument, LayoutApiSetPdmLayoutRequest, LayoutApiPutWorkspaceLayoutRequest, ITigerClient, JsonApiDataSourceInAttributesTypeEnum, TestDefinitionRequestTypeEnum, DeclarativeTables, DeclarativeAnalytics, JsonApiWorkspaceInDocument, DependentEntitiesRequest, DependentEntitiesResponse, ApiEntitlement, ActionsApiProcessInvitationRequest, PlatformUsage, DeclarativeWorkspaceDataFilters, DataSourceParameter } from "@gooddata/api-client-tiger";
import { ErrorConverter, IAnalyticalBackend } from "@gooddata/sdk-backend-spi";
import { AuthenticatedAsyncCall } from "@gooddata/sdk-backend-base";
import { AxiosRequestConfig } from "axios";
/**
 * @internal
 */
export interface IApiToken {
    id: string;
}
/**
 * @internal
 */
export interface IApiTokenExtended extends IApiToken {
    bearerToken: string | undefined;
}
/**
 * Copy of interface from gooddata/data-source-management
 * This should be refactored to have the source of truth here in SDK and not expose JSON API entities
 *
 * @internal
 */
export interface IDataSource {
    entity: JsonApiDataSourceInDocument;
    pdm: DeclarativePdm;
}
/**
 * @internal
 */
export interface ScanRequest {
    scanTables: boolean;
    scanViews: boolean;
    separator: string;
    tablePrefix: string;
    viewPrefix: string;
    schemata: string[];
}
/**
 * @internal
 */
export interface ScanResult {
    pdm: DeclarativeTables;
}
/**
 * @internal
 */
export interface PublishPdmResult {
    status: string;
}
/**
 * @internal
 */
export interface Entitlement {
    id: string;
    value?: string;
    expiry?: string;
}
/**
 * @internal
 */
export declare type IDataSourceType = JsonApiDataSourceInAttributesTypeEnum;
/**
 * @internal
 */
export declare type IDataSourcePermission = "MANAGE" | "USE";
/**
 * @internal
 */
export interface IDataSourceConnectionInfo {
    id: string;
    type: IDataSourceType;
    name: string;
    schema: string;
    username?: string;
    url?: string;
    permissions?: IDataSourcePermission[];
    parameters?: Array<DataSourceParameter>;
    decodedParameters?: Array<DataSourceParameter>;
}
/**
 *@internal
 */
export interface IDataSourceApiResult {
    data?: IDataSourceConnectionInfo;
    errorMessage?: string;
}
/**
 * @internal
 */
export interface IDataSourceUpsertRequest {
    id: string;
    name: string;
    password?: string;
    schema: string;
    token?: string;
    type: IDataSourceType;
    url?: string;
    username?: string;
    parameters?: Array<DataSourceParameter>;
}
/**
 * @internal
 */
export interface IDataSourcePatchRequest {
    id: string;
    name?: string;
    password?: string;
    schema?: string;
    token?: string;
    type?: IDataSourceType;
    url?: string;
    username?: string;
    parameters?: Array<DataSourceParameter>;
}
/**
 * @internal
 */
export interface IDataSourceTestConnectionRequest {
    password?: string;
    schema: string;
    token?: string;
    type: TestDefinitionRequestTypeEnum;
    url: string;
    username?: string;
    parameters?: Array<DataSourceParameter>;
}
/**
 * @internal
 */
export interface IDataSourceTestConnectionResponse {
    successful: boolean;
    error?: string;
}
/**
 * @internal
 */
export interface IDataSourceDeletedResponse {
    successful?: boolean;
    errorMessage?: string;
}
/**
 * @internal
 */
export interface IInvitationUserResponse {
    successful?: boolean;
    errorMessage?: string;
}
/**
 * @internal
 */
export declare type OrganizationPermission = JsonApiOrganizationOutMetaPermissionsEnum;
/**
 * @internal
 */
export declare type GenerateLogicalModelRequest = GenerateLdmRequest;
/**
 * @internal
 */
export declare type DeclarativeLogicalModel = DeclarativeModel;
/**
 * @internal
 */
export declare type DeclarativeAnalyticsModel = DeclarativeAnalytics;
/**
 * @internal
 */
export declare type PhysicalDataModel = DeclarativePdm;
/**
 * @internal
 */
export declare type SetPdmLayoutRequest = LayoutApiSetPdmLayoutRequest;
/**
 * @internal
 */
export declare type PutWorkspaceLayoutRequest = LayoutApiPutWorkspaceLayoutRequest;
/**
 * @internal
 */
export declare type DataSourceDefinition = JsonApiDataSourceInDocument;
/**
 * @internal
 */
export declare type WorkspaceDefinition = JsonApiWorkspaceInDocument;
/**
 * @internal
 */
export declare type DependentEntitiesGraphRequest = DependentEntitiesRequest;
/**
 * @internal
 */
export declare type DependentEntitiesGraphResponse = DependentEntitiesResponse;
/**
 * @internal
 */
export declare type WorkspaceDataFiltersLayout = DeclarativeWorkspaceDataFilters;
/**
 * TigerBackend-specific functions.
 * If possible, avoid these functions, they are here for specific use cases.
 *
 * Do not use parameters or return values from \@gooddata/api-client-tiger.
 *
 * @internal
 */
export declare type TigerSpecificFunctions = {
    isCommunityEdition?: () => Promise<boolean>;
    isOrganizationAdmin?: () => Promise<boolean>;
    organizationExpiredDate?: () => Promise<string>;
    getOrganizationAllowedOrigins?: (organizationId: string) => Promise<string[]>;
    getOrganizationPermissions?: (organizationId: string) => Promise<Array<OrganizationPermission>>;
    updateOrganizationAllowedOrigins?: (organizationId: string, updatedOrigins: string[]) => Promise<string[]>;
    getDeploymentVersion?: () => Promise<string>;
    getAllApiTokens?: (userId: string) => Promise<IApiToken[]>;
    generateApiToken?: (userId: string, tokenId: string) => Promise<IApiTokenExtended | undefined>;
    deleteApiToken?: (userId: string, tokenId: string) => Promise<void>;
    someDataSourcesExists?: (filter?: string) => Promise<boolean>;
    generateLogicalModel?: (dataSourceId: string, generateLogicalModelRequest: GenerateLogicalModelRequest) => Promise<DeclarativeLogicalModel>;
    scanDataSource?: (dataSourceId: string, scanRequest: ScanRequest) => Promise<ScanResult>;
    publishPdm?: (dataSourceId: string, declarativePdm: PhysicalDataModel) => Promise<PublishPdmResult>;
    createDemoWorkspace?: (sampleWorkspace: WorkspaceDefinition) => Promise<string>;
    createDemoDataSource?: (sampleDataSource: DataSourceDefinition) => Promise<string>;
    setPdmLayout?: (requestParameters: SetPdmLayoutRequest) => Promise<void>;
    createWorkspace?: (id: string, name: string) => Promise<string>;
    updateWorkspaceTitle?: (id: string, name: string) => Promise<void>;
    deleteWorkspace?: (id: string) => Promise<void>;
    canDeleteWorkspace?: (id: string) => Promise<boolean>;
    getWorkspaceLogicalModel?: (id: string, includeParents?: boolean) => Promise<DeclarativeLogicalModel>;
    getEntitlements?: () => Promise<Array<Entitlement>>;
    putWorkspaceLayout?: (requestParameters: PutWorkspaceLayoutRequest) => Promise<void>;
    getAllDataSources?: () => Promise<IDataSourceConnectionInfo[]>;
    getDataSourceById?: (id: string) => Promise<IDataSourceApiResult>;
    getDataSourceIdentifierById?: (id: string) => Promise<IDataSourceApiResult>;
    createDataSource?: (requestData: IDataSourceUpsertRequest) => Promise<IDataSourceApiResult>;
    updateDataSource?: (id: string, requestData: IDataSourceUpsertRequest) => Promise<IDataSourceApiResult>;
    patchDataSource?: (id: string, requestData: IDataSourcePatchRequest) => Promise<IDataSourceApiResult>;
    deleteDataSource?: (id: string) => Promise<IDataSourceDeletedResponse>;
    testDataSourceConnection?: (connectionData: IDataSourceTestConnectionRequest, id?: string) => Promise<IDataSourceTestConnectionResponse>;
    publishLogicalModel?: (workspaceId: string, declarativeModel: DeclarativeLogicalModel) => Promise<void>;
    getDataSourceSchemata?: (dataSourceId: string) => Promise<string[]>;
    getPdm?: (dataSourceId: string) => Promise<PhysicalDataModel>;
    getDependentEntitiesGraph?: (workspaceId: string) => Promise<DependentEntitiesGraphResponse>;
    getDependentEntitiesGraphFromEntryPoints?: (workspaceId: string, dependentEntitiesGraphRequest: DependentEntitiesGraphRequest) => Promise<DependentEntitiesGraphResponse>;
    resolveAllEntitlements?: () => Promise<ApiEntitlement[]>;
    getAllPlatformUsage?: () => Promise<PlatformUsage[]>;
    inviteUser?: (requestParameters: ActionsApiProcessInvitationRequest, options?: AxiosRequestConfig) => Promise<IInvitationUserResponse>;
    getWorkspaceDataFiltersLayout?: () => Promise<WorkspaceDataFiltersLayout>;
    setWorkspaceDataFiltersLayout?: (workspaceDataFiltersLayout: WorkspaceDataFiltersLayout) => Promise<void>;
};
export declare const buildTigerSpecificFunctions: (backend: IAnalyticalBackend, authApiCall: <T>(call: AuthenticatedAsyncCall<ITigerClient, T>, errorConverter?: ErrorConverter | undefined) => Promise<T>) => TigerSpecificFunctions;
//# sourceMappingURL=tigerSpecificFunctions.d.ts.map