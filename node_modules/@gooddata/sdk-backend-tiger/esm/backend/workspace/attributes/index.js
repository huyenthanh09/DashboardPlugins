import { __awaiter, __generator } from "tslib";
// (C) 2019-2022 GoodData Corporation
import { NotSupported, UnexpectedResponseError, } from "@gooddata/sdk-backend-spi";
import { areObjRefsEqual, isIdentifierRef, } from "@gooddata/sdk-model";
import { TigerWorkspaceElements } from "./elements";
import { jsonApiHeaders, MetadataUtilities, JsonApiDatasetOutWithLinksTypeEnum, } from "@gooddata/api-client-tiger";
import flatMap from "lodash/flatMap";
import last from "lodash/last";
import { invariant } from "ts-invariant";
import { convertAttributesWithSideloadedLabels, convertAttributeWithSideloadedLabels, convertDatasetWithLinks, } from "../../../convertors/fromBackend/MetadataConverter";
var TigerWorkspaceAttributes = /** @class */ (function () {
    function TigerWorkspaceAttributes(authCall, workspace) {
        var _this = this;
        this.authCall = authCall;
        this.workspace = workspace;
        this.getAttributeDisplayForm = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authCall(function (client) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                        return [2 /*return*/, loadAttributeDisplayForm(client, this.workspace, ref)];
                    }); }); })];
            });
        }); };
        this.getAttribute = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authCall(function (client) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                        return [2 /*return*/, loadAttribute(client, this.workspace, ref)];
                    }); }); })];
            });
        }); };
    }
    TigerWorkspaceAttributes.prototype.elements = function () {
        return new TigerWorkspaceElements(this.authCall, this.workspace);
    };
    TigerWorkspaceAttributes.prototype.getAttributeDisplayForms = function (refs) {
        var _this = this;
        return this.authCall(function (client) { return __awaiter(_this, void 0, void 0, function () {
            var allAttributes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, loadAttributes(client, this.workspace)];
                    case 1:
                        allAttributes = _a.sent();
                        return [2 /*return*/, flatMap(allAttributes, function (attr) { return attr.displayForms; }).filter(function (df) {
                                return refs.find(function (ref) { return areObjRefsEqual(ref, df.ref); });
                            })];
                }
            });
        }); });
    };
    TigerWorkspaceAttributes.prototype.getAttributeByDisplayForm = function (ref) {
        var _this = this;
        return this.authCall(function (client) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, loadAttributeByDisplayForm(client, this.workspace, ref)];
        }); }); });
    };
    TigerWorkspaceAttributes.prototype.getAttributes = function (refs) {
        var _this = this;
        return this.authCall(function (client) { return __awaiter(_this, void 0, void 0, function () {
            var allAttributes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, loadAttributes(client, this.workspace)];
                    case 1:
                        allAttributes = _a.sent();
                        return [2 /*return*/, allAttributes.filter(function (attr) { return refs.find(function (ref) { return areObjRefsEqual(ref, attr.ref); }); })];
                }
            });
        }); });
    };
    TigerWorkspaceAttributes.prototype.getCommonAttributes = function () {
        throw new NotSupported("not supported");
    };
    TigerWorkspaceAttributes.prototype.getCommonAttributesBatch = function () {
        throw new NotSupported("not supported");
    };
    TigerWorkspaceAttributes.prototype.getAttributeDatasetMeta = function (ref) {
        var _this = this;
        return this.authCall(function (client) {
            return loadAttributeDataset(client, _this.workspace, ref);
        });
    };
    return TigerWorkspaceAttributes;
}());
export { TigerWorkspaceAttributes };
function loadAttributeDisplayForm(client, workspaceId, ref) {
    return __awaiter(this, void 0, void 0, function () {
        var attributeRes, attribute, matchingLabel;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    invariant(isIdentifierRef(ref), "tiger backend only supports referencing by identifier");
                    return [4 /*yield*/, client.entities.getAllEntitiesAttributes({
                            workspaceId: workspaceId,
                            include: ["labels", "defaultView"],
                            filter: "labels.id==" + ref.identifier,
                        }, {
                            headers: jsonApiHeaders,
                        })];
                case 1:
                    attributeRes = _a.sent();
                    if (!attributeRes.data.data.length) {
                        throw new UnexpectedResponseError("The displayForm with id " + ref.identifier + " was not found", 404, attributeRes);
                    }
                    attribute = convertAttributesWithSideloadedLabels(attributeRes.data)[0];
                    matchingLabel = attribute.displayForms.find(function (df) { return areObjRefsEqual(df.ref, ref); });
                    invariant(matchingLabel, "inconsistent server response, RSQL matched but ref matching did not");
                    return [2 /*return*/, matchingLabel];
            }
        });
    });
}
function loadAttribute(client, workspaceId, ref) {
    invariant(isIdentifierRef(ref), "tiger backend only supports referencing by identifier");
    return client.entities
        .getEntityAttributes({
        workspaceId: workspaceId,
        objectId: ref.identifier,
        include: ["labels", "defaultView"],
    }, {
        headers: jsonApiHeaders,
    })
        .then(function (res) { return convertAttributeWithSideloadedLabels(res.data); });
}
function loadAttributeByDisplayForm(client, workspaceId, ref) {
    invariant(isIdentifierRef(ref), "tiger backend only supports referencing by identifier");
    // tiger RSQL does not support prefixed ids, so we strip the prefix to load matches with or without prefix
    // and then find the prefixed value in the results
    var idWithoutPrefix = last(ref.identifier.split(":"));
    return client.entities
        .getAllEntitiesAttributes({
        workspaceId: workspaceId,
        filter: "labels.id==" + idWithoutPrefix,
        include: ["labels"],
    }, {
        headers: jsonApiHeaders,
    })
        .then(function (res) {
        var convertedAttributes = convertAttributesWithSideloadedLabels(res.data);
        var match = convertedAttributes.find(function (attr) {
            return attr.displayForms.some(function (df) { return df.id === ref.identifier; });
        });
        if (!match) {
            throw new UnexpectedResponseError("The displayForm with id " + ref.identifier + " was not found", 404, res);
        }
        return match;
    });
}
function loadAttributes(client, workspaceId) {
    return MetadataUtilities.getAllPagesOf(client, client.entities.getAllEntitiesAttributes, {
        workspaceId: workspaceId,
        include: ["labels"],
    })
        .then(MetadataUtilities.mergeEntitiesResults)
        .then(convertAttributesWithSideloadedLabels);
}
function loadAttributeDataset(client, workspace, ref) {
    invariant(isIdentifierRef(ref), "tiger backend only supports referencing by identifier");
    return client.entities
        .getEntityAttributes({
        workspaceId: workspace,
        objectId: ref.identifier,
        include: ["datasets"],
    }, {
        headers: jsonApiHeaders,
    })
        .then(function (res) {
        // if this happens then its either bad query parameterization or the backend is hosed badly
        invariant(res.data.included && res.data.included.length > 0, "server returned that attribute does not belong to any dataset");
        var datasets = res.data.included.filter(function (include) {
            return include.type === JsonApiDatasetOutWithLinksTypeEnum.DATASET;
        });
        return convertDatasetWithLinks(datasets[0]);
    });
}
//# sourceMappingURL=index.js.map