/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from "./configuration";
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { RequestArgs, BaseAPI } from './base';
/**
 * Custom label object override.
 * @export
 * @interface CustomLabel
 */
export interface CustomLabel {
    /**
     * Override value.
     * @type {string}
     * @memberof CustomLabel
     */
    title: string;
}
/**
 * Custom metric object override.
 * @export
 * @interface CustomMetric
 */
export interface CustomMetric {
    /**
     * Metric title override.
     * @type {string}
     * @memberof CustomMetric
     */
    title: string;
    /**
     * Format override.
     * @type {string}
     * @memberof CustomMetric
     */
    format: string;
}
/**
 * Custom cell value overrides (IDs will be replaced with specified values).
 * @export
 * @interface CustomOverride
 */
export interface CustomOverride {
    /**
     * Map of CustomLabels with keys used as placeholders in document.
     * @type {{ [key: string]: CustomLabel; }}
     * @memberof CustomOverride
     */
    labels?: {
        [key: string]: CustomLabel;
    };
    /**
     * Map of CustomMetrics with keys used as placeholders in document.
     * @type {{ [key: string]: CustomMetric; }}
     * @memberof CustomOverride
     */
    metrics?: {
        [key: string]: CustomMetric;
    };
}
/**
 * XLSX specific settings.
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     * Merge equal headers in neighbouring cells.
     * @type {boolean}
     * @memberof Settings
     */
    mergeHeaders: boolean;
    /**
     * Print used filters on top o document.
     * @type {boolean}
     * @memberof Settings
     */
    showFilters: boolean;
}
/**
 * Export request object describing the export properties and overrides for tabular exports.
 * @export
 * @interface TabularExportRequest
 */
export interface TabularExportRequest {
    /**
     * Expected file format.
     * @type {string}
     * @memberof TabularExportRequest
     */
    format: TabularExportRequestFormatEnum;
    /**
     * Execution result identifier.
     * @type {string}
     * @memberof TabularExportRequest
     */
    executionResult: string;
    /**
     * Filename of downloaded file without extension.
     * @type {string}
     * @memberof TabularExportRequest
     */
    fileName: string;
    /**
     *
     * @type {Settings}
     * @memberof TabularExportRequest
     */
    settings?: Settings;
    /**
     *
     * @type {CustomOverride}
     * @memberof TabularExportRequest
     */
    customOverride?: CustomOverride;
}
export declare const TabularExportRequestFormatEnum: {
    readonly CSV: "CSV";
};
export declare type TabularExportRequestFormatEnum = typeof TabularExportRequestFormatEnum[keyof typeof TabularExportRequestFormatEnum];
/**
 *
 * @export
 * @interface TabularExportResult
 */
export interface TabularExportResult {
    /**
     *
     * @type {string}
     * @memberof TabularExportResult
     */
    exportResult: string;
}
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export declare const ActionsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {string} workspaceId
     * @param {TabularExportRequest} tabularExportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTabularExport: (workspaceId: string, tabularExportRequest: TabularExportRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTabularExport: (workspaceId: string, exportId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ActionsApi - functional programming interface
 * @export
 */
export declare const ActionsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {string} workspaceId
     * @param {TabularExportRequest} tabularExportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTabularExport(workspaceId: string, tabularExportRequest: TabularExportRequest, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TabularExportResult>>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTabularExport(workspaceId: string, exportId: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * ActionsApi - factory interface
 * @export
 */
export declare const ActionsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {ActionsApiCreateTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTabularExport(requestParameters: ActionsApiCreateTabularExportRequest, options?: AxiosRequestConfig | undefined): AxiosPromise<TabularExportResult>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {ActionsApiGetTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTabularExport(requestParameters: ActionsApiGetTabularExportRequest, options?: AxiosRequestConfig | undefined): AxiosPromise<void>;
};
/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export interface ActionsApiInterface {
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {ActionsApiCreateTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    createTabularExport(requestParameters: ActionsApiCreateTabularExportRequest, options?: AxiosRequestConfig): AxiosPromise<TabularExportResult>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {ActionsApiGetTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getTabularExport(requestParameters: ActionsApiGetTabularExportRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * Request parameters for createTabularExport operation in ActionsApi.
 * @export
 * @interface ActionsApiCreateTabularExportRequest
 */
export interface ActionsApiCreateTabularExportRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiCreateTabularExport
     */
    readonly workspaceId: string;
    /**
     *
     * @type {TabularExportRequest}
     * @memberof ActionsApiCreateTabularExport
     */
    readonly tabularExportRequest: TabularExportRequest;
}
/**
 * Request parameters for getTabularExport operation in ActionsApi.
 * @export
 * @interface ActionsApiGetTabularExportRequest
 */
export interface ActionsApiGetTabularExportRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetTabularExport
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetTabularExport
     */
    readonly exportId: string;
}
/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export declare class ActionsApi extends BaseAPI implements ActionsApiInterface {
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {ActionsApiCreateTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    createTabularExport(requestParameters: ActionsApiCreateTabularExportRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TabularExportResult>>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {ActionsApiGetTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    getTabularExport(requestParameters: ActionsApiGetTabularExportRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
}
//# sourceMappingURL=api.d.ts.map